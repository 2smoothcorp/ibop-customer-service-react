/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.219
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AttorneyInfoOutputListDataResponse } from '../model';
// @ts-ignore
import { BankInfoOutputListDataResponse } from '../model';
// @ts-ignore
import { BeneficiaryOutputDataResponse } from '../model';
// @ts-ignore
import { ContactInfoOutputDataResponse } from '../model';
// @ts-ignore
import { CustomerProfileReportOutputCustomerProfileReportOutputPagination } from '../model';
// @ts-ignore
import { CustomerValidDataResponse } from '../model';
// @ts-ignore
import { FinancialInfoOutputDataResponse } from '../model';
// @ts-ignore
import { IsValidOutputDataResponse } from '../model';
// @ts-ignore
import { PersonalOutputDataResponse } from '../model';
/**
 * CustomerProfileApi - axios parameter creator
 * @export
 */
export const CustomerProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [referenceID] 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCheckValidGet: async (referenceID?: string, employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/check-valid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (referenceID !== undefined) {
                localVarQueryParameter['ReferenceID'] = referenceID;
            }

            if (employeeID !== undefined) {
                localVarQueryParameter['EmployeeID'] = employeeID;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [corporateID] 
         * @param {string} [referenceID] 
         * @param {string} [fullName] 
         * @param {string} [backOfficeAccountNo] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetAllGet: async (corporateID?: string, referenceID?: string, fullName?: string, backOfficeAccountNo?: string, startDate?: string, endDate?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateID !== undefined) {
                localVarQueryParameter['CorporateID'] = corporateID;
            }

            if (referenceID !== undefined) {
                localVarQueryParameter['ReferenceID'] = referenceID;
            }

            if (fullName !== undefined) {
                localVarQueryParameter['FullName'] = fullName;
            }

            if (backOfficeAccountNo !== undefined) {
                localVarQueryParameter['BackOfficeAccountNo'] = backOfficeAccountNo;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetAttorneyInfoGet: async (corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/GetAttorneyInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateId !== undefined) {
                localVarQueryParameter['corporateId'] = corporateId;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetBankAtsInfoGet: async (corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/GetBankAtsInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateId !== undefined) {
                localVarQueryParameter['corporateId'] = corporateId;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetBankDividendInfoGet: async (corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/GetBankDividendInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateId !== undefined) {
                localVarQueryParameter['corporateId'] = corporateId;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetBeneficiaryInfoGet: async (corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/GetBeneficiaryInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateId !== undefined) {
                localVarQueryParameter['corporateId'] = corporateId;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetContactInfoGet: async (corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/GetContactInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateId !== undefined) {
                localVarQueryParameter['corporateId'] = corporateId;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetFinancialInfoGet: async (corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/GetFinancialInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateId !== undefined) {
                localVarQueryParameter['corporateId'] = corporateId;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary API for getting all account setting as list
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetPersonalInfoGet: async (corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/GetPersonalInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateId !== undefined) {
                localVarQueryParameter['corporateId'] = corporateId;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [referenceId] 
         * @param {string} [email] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [mobile] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileIsValidGet: async (referenceId?: string, email?: string, firstName?: string, lastName?: string, mobile?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/is-valid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (referenceId !== undefined) {
                localVarQueryParameter['referenceId'] = referenceId;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (mobile !== undefined) {
                localVarQueryParameter['mobile'] = mobile;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerProfileApi - functional programming interface
 * @export
 */
export const CustomerProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [referenceID] 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileCheckValidGet(referenceID?: string, employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerValidDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileCheckValidGet(referenceID, employeeID, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [corporateID] 
         * @param {string} [referenceID] 
         * @param {string} [fullName] 
         * @param {string} [backOfficeAccountNo] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileGetAllGet(corporateID?: string, referenceID?: string, fullName?: string, backOfficeAccountNo?: string, startDate?: string, endDate?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerProfileReportOutputCustomerProfileReportOutputPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileGetAllGet(corporateID, referenceID, fullName, backOfficeAccountNo, startDate, endDate, pageIndex, pageSize, sortField, sortDirection, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileGetAttorneyInfoGet(corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttorneyInfoOutputListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileGetAttorneyInfoGet(corporateId, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileGetBankAtsInfoGet(corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankInfoOutputListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileGetBankAtsInfoGet(corporateId, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileGetBankDividendInfoGet(corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BankInfoOutputListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileGetBankDividendInfoGet(corporateId, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileGetBeneficiaryInfoGet(corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BeneficiaryOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileGetBeneficiaryInfoGet(corporateId, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileGetContactInfoGet(corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactInfoOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileGetContactInfoGet(corporateId, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileGetFinancialInfoGet(corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinancialInfoOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileGetFinancialInfoGet(corporateId, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary API for getting all account setting as list
         * @param {string} [corporateId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileGetPersonalInfoGet(corporateId?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileGetPersonalInfoGet(corporateId, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [referenceId] 
         * @param {string} [email] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {string} [mobile] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileIsValidGet(referenceId?: string, email?: string, firstName?: string, lastName?: string, mobile?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsValidOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileIsValidGet(referenceId, email, firstName, lastName, mobile, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerProfileApi - factory interface
 * @export
 */
export const CustomerProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerProfileApiFp(configuration)
    return {
        /**
         * 
         * @param {CustomerProfileApiCustomerProfileCheckValidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCheckValidGet(requestParameters: CustomerProfileApiCustomerProfileCheckValidGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CustomerValidDataResponse> {
            return localVarFp.customerProfileCheckValidGet(requestParameters.referenceID, requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerProfileApiCustomerProfileGetAllGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetAllGet(requestParameters: CustomerProfileApiCustomerProfileGetAllGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CustomerProfileReportOutputCustomerProfileReportOutputPagination> {
            return localVarFp.customerProfileGetAllGet(requestParameters.corporateID, requestParameters.referenceID, requestParameters.fullName, requestParameters.backOfficeAccountNo, requestParameters.startDate, requestParameters.endDate, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerProfileApiCustomerProfileGetAttorneyInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetAttorneyInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetAttorneyInfoGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AttorneyInfoOutputListDataResponse> {
            return localVarFp.customerProfileGetAttorneyInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerProfileApiCustomerProfileGetBankAtsInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetBankAtsInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetBankAtsInfoGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BankInfoOutputListDataResponse> {
            return localVarFp.customerProfileGetBankAtsInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerProfileApiCustomerProfileGetBankDividendInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetBankDividendInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetBankDividendInfoGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BankInfoOutputListDataResponse> {
            return localVarFp.customerProfileGetBankDividendInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerProfileApiCustomerProfileGetBeneficiaryInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetBeneficiaryInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetBeneficiaryInfoGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BeneficiaryOutputDataResponse> {
            return localVarFp.customerProfileGetBeneficiaryInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerProfileApiCustomerProfileGetContactInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetContactInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetContactInfoGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ContactInfoOutputDataResponse> {
            return localVarFp.customerProfileGetContactInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerProfileApiCustomerProfileGetFinancialInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetFinancialInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetFinancialInfoGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<FinancialInfoOutputDataResponse> {
            return localVarFp.customerProfileGetFinancialInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary API for getting all account setting as list
         * @param {CustomerProfileApiCustomerProfileGetPersonalInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileGetPersonalInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetPersonalInfoGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PersonalOutputDataResponse> {
            return localVarFp.customerProfileGetPersonalInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerProfileApiCustomerProfileIsValidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileIsValidGet(requestParameters: CustomerProfileApiCustomerProfileIsValidGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<IsValidOutputDataResponse> {
            return localVarFp.customerProfileIsValidGet(requestParameters.referenceId, requestParameters.email, requestParameters.firstName, requestParameters.lastName, requestParameters.mobile, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for customerProfileCheckValidGet operation in CustomerProfileApi.
 * @export
 * @interface CustomerProfileApiCustomerProfileCheckValidGetRequest
 */
export interface CustomerProfileApiCustomerProfileCheckValidGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileCheckValidGet
     */
    readonly referenceID?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileCheckValidGet
     */
    readonly employeeID?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileApiCustomerProfileCheckValidGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for customerProfileGetAllGet operation in CustomerProfileApi.
 * @export
 * @interface CustomerProfileApiCustomerProfileGetAllGetRequest
 */
export interface CustomerProfileApiCustomerProfileGetAllGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetAllGet
     */
    readonly corporateID?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetAllGet
     */
    readonly referenceID?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetAllGet
     */
    readonly fullName?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetAllGet
     */
    readonly backOfficeAccountNo?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetAllGet
     */
    readonly startDate?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetAllGet
     */
    readonly endDate?: string

    /**
     * 
     * @type {number}
     * @memberof CustomerProfileApiCustomerProfileGetAllGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof CustomerProfileApiCustomerProfileGetAllGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetAllGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetAllGet
     */
    readonly sortDirection?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileApiCustomerProfileGetAllGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for customerProfileGetAttorneyInfoGet operation in CustomerProfileApi.
 * @export
 * @interface CustomerProfileApiCustomerProfileGetAttorneyInfoGetRequest
 */
export interface CustomerProfileApiCustomerProfileGetAttorneyInfoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetAttorneyInfoGet
     */
    readonly corporateId?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileApiCustomerProfileGetAttorneyInfoGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for customerProfileGetBankAtsInfoGet operation in CustomerProfileApi.
 * @export
 * @interface CustomerProfileApiCustomerProfileGetBankAtsInfoGetRequest
 */
export interface CustomerProfileApiCustomerProfileGetBankAtsInfoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetBankAtsInfoGet
     */
    readonly corporateId?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileApiCustomerProfileGetBankAtsInfoGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for customerProfileGetBankDividendInfoGet operation in CustomerProfileApi.
 * @export
 * @interface CustomerProfileApiCustomerProfileGetBankDividendInfoGetRequest
 */
export interface CustomerProfileApiCustomerProfileGetBankDividendInfoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetBankDividendInfoGet
     */
    readonly corporateId?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileApiCustomerProfileGetBankDividendInfoGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for customerProfileGetBeneficiaryInfoGet operation in CustomerProfileApi.
 * @export
 * @interface CustomerProfileApiCustomerProfileGetBeneficiaryInfoGetRequest
 */
export interface CustomerProfileApiCustomerProfileGetBeneficiaryInfoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetBeneficiaryInfoGet
     */
    readonly corporateId?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileApiCustomerProfileGetBeneficiaryInfoGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for customerProfileGetContactInfoGet operation in CustomerProfileApi.
 * @export
 * @interface CustomerProfileApiCustomerProfileGetContactInfoGetRequest
 */
export interface CustomerProfileApiCustomerProfileGetContactInfoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetContactInfoGet
     */
    readonly corporateId?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileApiCustomerProfileGetContactInfoGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for customerProfileGetFinancialInfoGet operation in CustomerProfileApi.
 * @export
 * @interface CustomerProfileApiCustomerProfileGetFinancialInfoGetRequest
 */
export interface CustomerProfileApiCustomerProfileGetFinancialInfoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetFinancialInfoGet
     */
    readonly corporateId?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileApiCustomerProfileGetFinancialInfoGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for customerProfileGetPersonalInfoGet operation in CustomerProfileApi.
 * @export
 * @interface CustomerProfileApiCustomerProfileGetPersonalInfoGetRequest
 */
export interface CustomerProfileApiCustomerProfileGetPersonalInfoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileGetPersonalInfoGet
     */
    readonly corporateId?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileApiCustomerProfileGetPersonalInfoGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for customerProfileIsValidGet operation in CustomerProfileApi.
 * @export
 * @interface CustomerProfileApiCustomerProfileIsValidGetRequest
 */
export interface CustomerProfileApiCustomerProfileIsValidGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileIsValidGet
     */
    readonly referenceId?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileIsValidGet
     */
    readonly email?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileIsValidGet
     */
    readonly firstName?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileIsValidGet
     */
    readonly lastName?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileApiCustomerProfileIsValidGet
     */
    readonly mobile?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileApiCustomerProfileIsValidGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * CustomerProfileApi - object-oriented interface
 * @export
 * @class CustomerProfileApi
 * @extends {BaseAPI}
 */
export class CustomerProfileApi extends BaseAPI {
    /**
     * 
     * @param {CustomerProfileApiCustomerProfileCheckValidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileApi
     */
    public customerProfileCheckValidGet(requestParameters: CustomerProfileApiCustomerProfileCheckValidGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileApiFp(this.configuration).customerProfileCheckValidGet(requestParameters.referenceID, requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerProfileApiCustomerProfileGetAllGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileApi
     */
    public customerProfileGetAllGet(requestParameters: CustomerProfileApiCustomerProfileGetAllGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileApiFp(this.configuration).customerProfileGetAllGet(requestParameters.corporateID, requestParameters.referenceID, requestParameters.fullName, requestParameters.backOfficeAccountNo, requestParameters.startDate, requestParameters.endDate, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerProfileApiCustomerProfileGetAttorneyInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileApi
     */
    public customerProfileGetAttorneyInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetAttorneyInfoGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileApiFp(this.configuration).customerProfileGetAttorneyInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerProfileApiCustomerProfileGetBankAtsInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileApi
     */
    public customerProfileGetBankAtsInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetBankAtsInfoGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileApiFp(this.configuration).customerProfileGetBankAtsInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerProfileApiCustomerProfileGetBankDividendInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileApi
     */
    public customerProfileGetBankDividendInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetBankDividendInfoGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileApiFp(this.configuration).customerProfileGetBankDividendInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerProfileApiCustomerProfileGetBeneficiaryInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileApi
     */
    public customerProfileGetBeneficiaryInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetBeneficiaryInfoGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileApiFp(this.configuration).customerProfileGetBeneficiaryInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerProfileApiCustomerProfileGetContactInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileApi
     */
    public customerProfileGetContactInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetContactInfoGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileApiFp(this.configuration).customerProfileGetContactInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerProfileApiCustomerProfileGetFinancialInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileApi
     */
    public customerProfileGetFinancialInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetFinancialInfoGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileApiFp(this.configuration).customerProfileGetFinancialInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary API for getting all account setting as list
     * @param {CustomerProfileApiCustomerProfileGetPersonalInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileApi
     */
    public customerProfileGetPersonalInfoGet(requestParameters: CustomerProfileApiCustomerProfileGetPersonalInfoGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileApiFp(this.configuration).customerProfileGetPersonalInfoGet(requestParameters.corporateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerProfileApiCustomerProfileIsValidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileApi
     */
    public customerProfileIsValidGet(requestParameters: CustomerProfileApiCustomerProfileIsValidGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileApiFp(this.configuration).customerProfileIsValidGet(requestParameters.referenceId, requestParameters.email, requestParameters.firstName, requestParameters.lastName, requestParameters.mobile, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }
}
