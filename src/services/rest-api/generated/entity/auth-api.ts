/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.219
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetTokenOutput } from '../model';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates a new JWT token.
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGenerateJwtTokenPost: async (UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auth/GenerateJwtToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authNlogNlogGet: async (UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Auth/Nlog/Nlog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generates a new JWT token.
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGenerateJwtTokenPost(UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTokenOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGenerateJwtTokenPost(UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authNlogNlogGet(UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authNlogNlogGet(UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Generates a new JWT token.
         * @param {AuthApiAuthGenerateJwtTokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGenerateJwtTokenPost(requestParameters: AuthApiAuthGenerateJwtTokenPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetTokenOutput> {
            return localVarFp.authGenerateJwtTokenPost(requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthNlogNlogGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authNlogNlogGet(requestParameters: AuthApiAuthNlogNlogGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.authNlogNlogGet(requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authGenerateJwtTokenPost operation in AuthApi.
 * @export
 * @interface AuthApiAuthGenerateJwtTokenPostRequest
 */
export interface AuthApiAuthGenerateJwtTokenPostRequest {
    /**
     * 
     * @type {}
     * @memberof AuthApiAuthGenerateJwtTokenPost
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for authNlogNlogGet operation in AuthApi.
 * @export
 * @interface AuthApiAuthNlogNlogGetRequest
 */
export interface AuthApiAuthNlogNlogGetRequest {
    /**
     * 
     * @type {}
     * @memberof AuthApiAuthNlogNlogGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Generates a new JWT token.
     * @param {AuthApiAuthGenerateJwtTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGenerateJwtTokenPost(requestParameters: AuthApiAuthGenerateJwtTokenPostRequest = {}, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGenerateJwtTokenPost(requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthNlogNlogGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authNlogNlogGet(requestParameters: AuthApiAuthNlogNlogGetRequest = {}, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authNlogNlogGet(requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }
}
