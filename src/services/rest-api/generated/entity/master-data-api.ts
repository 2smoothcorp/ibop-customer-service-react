/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.219
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ComboBoxListDataResponse } from '../model';
// @ts-ignore
import { GetMasterATSBankComboOutput } from '../model';
/**
 * MasterDataApi - axios parameter creator
 * @export
 */
export const MasterDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataAORoleGet: async (UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/master-data/AORole`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [mode] 
         * @param {string} [filter] 
         * @param {string} [userId] 
         * @param {string} [keyword] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataATSBankGet: async (mode?: string, filter?: string, userId?: string, keyword?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/master-data/ATSBank`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (mode !== undefined) {
                localVarQueryParameter['Mode'] = mode;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (userId !== undefined) {
                localVarQueryParameter['UserId'] = userId;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['Keyword'] = keyword;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBranchesGet: async (employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/master-data/Branches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (employeeID !== undefined) {
                localVarQueryParameter['EmployeeID'] = employeeID;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCountriesGet: async (employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/master-data/Countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (employeeID !== undefined) {
                localVarQueryParameter['EmployeeID'] = employeeID;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataICsGet: async (employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/master-data/ICs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (employeeID !== undefined) {
                localVarQueryParameter['EmployeeID'] = employeeID;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOccupationGet: async (employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/master-data/Occupation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (employeeID !== undefined) {
                localVarQueryParameter['EmployeeID'] = employeeID;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataPersonTypeGet: async (employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/master-data/PersonType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (employeeID !== undefined) {
                localVarQueryParameter['EmployeeID'] = employeeID;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataTitlesGet: async (employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/master-data/Titles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (employeeID !== undefined) {
                localVarQueryParameter['EmployeeID'] = employeeID;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MasterDataApi - functional programming interface
 * @export
 */
export const MasterDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MasterDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataAORoleGet(UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComboBoxListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataAORoleGet(UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [mode] 
         * @param {string} [filter] 
         * @param {string} [userId] 
         * @param {string} [keyword] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataATSBankGet(mode?: string, filter?: string, userId?: string, keyword?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMasterATSBankComboOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataATSBankGet(mode, filter, userId, keyword, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataBranchesGet(employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComboBoxListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataBranchesGet(employeeID, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataCountriesGet(employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComboBoxListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataCountriesGet(employeeID, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataICsGet(employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComboBoxListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataICsGet(employeeID, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataOccupationGet(employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComboBoxListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataOccupationGet(employeeID, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataPersonTypeGet(employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComboBoxListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataPersonTypeGet(employeeID, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [employeeID] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataTitlesGet(employeeID?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComboBoxListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataTitlesGet(employeeID, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MasterDataApi - factory interface
 * @export
 */
export const MasterDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MasterDataApiFp(configuration)
    return {
        /**
         * 
         * @param {MasterDataApiMasterDataAORoleGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataAORoleGet(requestParameters: MasterDataApiMasterDataAORoleGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ComboBoxListDataResponse> {
            return localVarFp.masterDataAORoleGet(requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MasterDataApiMasterDataATSBankGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataATSBankGet(requestParameters: MasterDataApiMasterDataATSBankGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetMasterATSBankComboOutput> {
            return localVarFp.masterDataATSBankGet(requestParameters.mode, requestParameters.filter, requestParameters.userId, requestParameters.keyword, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MasterDataApiMasterDataBranchesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBranchesGet(requestParameters: MasterDataApiMasterDataBranchesGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ComboBoxListDataResponse> {
            return localVarFp.masterDataBranchesGet(requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MasterDataApiMasterDataCountriesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCountriesGet(requestParameters: MasterDataApiMasterDataCountriesGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ComboBoxListDataResponse> {
            return localVarFp.masterDataCountriesGet(requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MasterDataApiMasterDataICsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataICsGet(requestParameters: MasterDataApiMasterDataICsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ComboBoxListDataResponse> {
            return localVarFp.masterDataICsGet(requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MasterDataApiMasterDataOccupationGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOccupationGet(requestParameters: MasterDataApiMasterDataOccupationGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ComboBoxListDataResponse> {
            return localVarFp.masterDataOccupationGet(requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MasterDataApiMasterDataPersonTypeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataPersonTypeGet(requestParameters: MasterDataApiMasterDataPersonTypeGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ComboBoxListDataResponse> {
            return localVarFp.masterDataPersonTypeGet(requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MasterDataApiMasterDataTitlesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataTitlesGet(requestParameters: MasterDataApiMasterDataTitlesGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ComboBoxListDataResponse> {
            return localVarFp.masterDataTitlesGet(requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for masterDataAORoleGet operation in MasterDataApi.
 * @export
 * @interface MasterDataApiMasterDataAORoleGetRequest
 */
export interface MasterDataApiMasterDataAORoleGetRequest {
    /**
     * 
     * @type {}
     * @memberof MasterDataApiMasterDataAORoleGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for masterDataATSBankGet operation in MasterDataApi.
 * @export
 * @interface MasterDataApiMasterDataATSBankGetRequest
 */
export interface MasterDataApiMasterDataATSBankGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MasterDataApiMasterDataATSBankGet
     */
    readonly mode?: string

    /**
     * 
     * @type {string}
     * @memberof MasterDataApiMasterDataATSBankGet
     */
    readonly filter?: string

    /**
     * 
     * @type {string}
     * @memberof MasterDataApiMasterDataATSBankGet
     */
    readonly userId?: string

    /**
     * 
     * @type {string}
     * @memberof MasterDataApiMasterDataATSBankGet
     */
    readonly keyword?: string

    /**
     * 
     * @type {}
     * @memberof MasterDataApiMasterDataATSBankGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for masterDataBranchesGet operation in MasterDataApi.
 * @export
 * @interface MasterDataApiMasterDataBranchesGetRequest
 */
export interface MasterDataApiMasterDataBranchesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MasterDataApiMasterDataBranchesGet
     */
    readonly employeeID?: string

    /**
     * 
     * @type {}
     * @memberof MasterDataApiMasterDataBranchesGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for masterDataCountriesGet operation in MasterDataApi.
 * @export
 * @interface MasterDataApiMasterDataCountriesGetRequest
 */
export interface MasterDataApiMasterDataCountriesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MasterDataApiMasterDataCountriesGet
     */
    readonly employeeID?: string

    /**
     * 
     * @type {}
     * @memberof MasterDataApiMasterDataCountriesGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for masterDataICsGet operation in MasterDataApi.
 * @export
 * @interface MasterDataApiMasterDataICsGetRequest
 */
export interface MasterDataApiMasterDataICsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MasterDataApiMasterDataICsGet
     */
    readonly employeeID?: string

    /**
     * 
     * @type {}
     * @memberof MasterDataApiMasterDataICsGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for masterDataOccupationGet operation in MasterDataApi.
 * @export
 * @interface MasterDataApiMasterDataOccupationGetRequest
 */
export interface MasterDataApiMasterDataOccupationGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MasterDataApiMasterDataOccupationGet
     */
    readonly employeeID?: string

    /**
     * 
     * @type {}
     * @memberof MasterDataApiMasterDataOccupationGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for masterDataPersonTypeGet operation in MasterDataApi.
 * @export
 * @interface MasterDataApiMasterDataPersonTypeGetRequest
 */
export interface MasterDataApiMasterDataPersonTypeGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MasterDataApiMasterDataPersonTypeGet
     */
    readonly employeeID?: string

    /**
     * 
     * @type {}
     * @memberof MasterDataApiMasterDataPersonTypeGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for masterDataTitlesGet operation in MasterDataApi.
 * @export
 * @interface MasterDataApiMasterDataTitlesGetRequest
 */
export interface MasterDataApiMasterDataTitlesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MasterDataApiMasterDataTitlesGet
     */
    readonly employeeID?: string

    /**
     * 
     * @type {}
     * @memberof MasterDataApiMasterDataTitlesGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * MasterDataApi - object-oriented interface
 * @export
 * @class MasterDataApi
 * @extends {BaseAPI}
 */
export class MasterDataApi extends BaseAPI {
    /**
     * 
     * @param {MasterDataApiMasterDataAORoleGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterDataApi
     */
    public masterDataAORoleGet(requestParameters: MasterDataApiMasterDataAORoleGetRequest = {}, options?: AxiosRequestConfig) {
        return MasterDataApiFp(this.configuration).masterDataAORoleGet(requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MasterDataApiMasterDataATSBankGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterDataApi
     */
    public masterDataATSBankGet(requestParameters: MasterDataApiMasterDataATSBankGetRequest = {}, options?: AxiosRequestConfig) {
        return MasterDataApiFp(this.configuration).masterDataATSBankGet(requestParameters.mode, requestParameters.filter, requestParameters.userId, requestParameters.keyword, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MasterDataApiMasterDataBranchesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterDataApi
     */
    public masterDataBranchesGet(requestParameters: MasterDataApiMasterDataBranchesGetRequest = {}, options?: AxiosRequestConfig) {
        return MasterDataApiFp(this.configuration).masterDataBranchesGet(requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MasterDataApiMasterDataCountriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterDataApi
     */
    public masterDataCountriesGet(requestParameters: MasterDataApiMasterDataCountriesGetRequest = {}, options?: AxiosRequestConfig) {
        return MasterDataApiFp(this.configuration).masterDataCountriesGet(requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MasterDataApiMasterDataICsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterDataApi
     */
    public masterDataICsGet(requestParameters: MasterDataApiMasterDataICsGetRequest = {}, options?: AxiosRequestConfig) {
        return MasterDataApiFp(this.configuration).masterDataICsGet(requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MasterDataApiMasterDataOccupationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterDataApi
     */
    public masterDataOccupationGet(requestParameters: MasterDataApiMasterDataOccupationGetRequest = {}, options?: AxiosRequestConfig) {
        return MasterDataApiFp(this.configuration).masterDataOccupationGet(requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MasterDataApiMasterDataPersonTypeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterDataApi
     */
    public masterDataPersonTypeGet(requestParameters: MasterDataApiMasterDataPersonTypeGetRequest = {}, options?: AxiosRequestConfig) {
        return MasterDataApiFp(this.configuration).masterDataPersonTypeGet(requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MasterDataApiMasterDataTitlesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MasterDataApi
     */
    public masterDataTitlesGet(requestParameters: MasterDataApiMasterDataTitlesGetRequest = {}, options?: AxiosRequestConfig) {
        return MasterDataApiFp(this.configuration).masterDataTitlesGet(requestParameters.employeeID, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }
}
