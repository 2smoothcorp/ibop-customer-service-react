/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.219
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConsentAnsweredOutputDataResponse } from '../model';
// @ts-ignore
import { ConsentQuestionOutputDataResponse } from '../model';
// @ts-ignore
import { ConsentSaveCorparateIdPostRequest } from '../model';
/**
 * ConsentApi - axios parameter creator
 * @export
 */
export const ConsentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} corparateId 
         * @param {string} [formId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentGetAnsweredCorparateIdGet: async (corparateId: string, formId?: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corparateId' is not null or undefined
            assertParamExists('consentGetAnsweredCorparateIdGet', 'corparateId', corparateId)
            const localVarPath = `/Consent/GetAnswered/{corparateId}`
                .replace(`{${"corparateId"}}`, encodeURIComponent(String(corparateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (formId !== undefined) {
                localVarQueryParameter['formId'] = formId;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} formId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentGetQuestionFormIdGet: async (formId: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('consentGetQuestionFormIdGet', 'formId', formId)
            const localVarPath = `/Consent/GetQuestion/{formId}`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {ConsentSaveCorparateIdPostRequest} [consentSaveCorparateIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentSaveCorparateIdPost: async (corparateId: string, UNKNOWN_PARAMETER_NAME?: , consentSaveCorparateIdPostRequest?: ConsentSaveCorparateIdPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corparateId' is not null or undefined
            assertParamExists('consentSaveCorparateIdPost', 'corparateId', corparateId)
            const localVarPath = `/Consent/Save/{corparateId}`
                .replace(`{${"corparateId"}}`, encodeURIComponent(String(corparateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(consentSaveCorparateIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsentApi - functional programming interface
 * @export
 */
export const ConsentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} corparateId 
         * @param {string} [formId] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consentGetAnsweredCorparateIdGet(corparateId: string, formId?: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentAnsweredOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.consentGetAnsweredCorparateIdGet(corparateId, formId, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} formId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consentGetQuestionFormIdGet(formId: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentQuestionOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.consentGetQuestionFormIdGet(formId, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {ConsentSaveCorparateIdPostRequest} [consentSaveCorparateIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consentSaveCorparateIdPost(corparateId: string, UNKNOWN_PARAMETER_NAME?: , consentSaveCorparateIdPostRequest?: ConsentSaveCorparateIdPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.consentSaveCorparateIdPost(corparateId, UNKNOWN_PARAMETER_NAME, consentSaveCorparateIdPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConsentApi - factory interface
 * @export
 */
export const ConsentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsentApiFp(configuration)
    return {
        /**
         * 
         * @param {ConsentApiConsentGetAnsweredCorparateIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentGetAnsweredCorparateIdGet(requestParameters: ConsentApiConsentGetAnsweredCorparateIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<ConsentAnsweredOutputDataResponse> {
            return localVarFp.consentGetAnsweredCorparateIdGet(requestParameters.corparateId, requestParameters.formId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ConsentApiConsentGetQuestionFormIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentGetQuestionFormIdGet(requestParameters: ConsentApiConsentGetQuestionFormIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<ConsentQuestionOutputDataResponse> {
            return localVarFp.consentGetQuestionFormIdGet(requestParameters.formId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ConsentApiConsentSaveCorparateIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentSaveCorparateIdPost(requestParameters: ConsentApiConsentSaveCorparateIdPostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.consentSaveCorparateIdPost(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, requestParameters.consentSaveCorparateIdPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for consentGetAnsweredCorparateIdGet operation in ConsentApi.
 * @export
 * @interface ConsentApiConsentGetAnsweredCorparateIdGetRequest
 */
export interface ConsentApiConsentGetAnsweredCorparateIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsentApiConsentGetAnsweredCorparateIdGet
     */
    readonly corparateId: string

    /**
     * 
     * @type {string}
     * @memberof ConsentApiConsentGetAnsweredCorparateIdGet
     */
    readonly formId?: string

    /**
     * 
     * @type {}
     * @memberof ConsentApiConsentGetAnsweredCorparateIdGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for consentGetQuestionFormIdGet operation in ConsentApi.
 * @export
 * @interface ConsentApiConsentGetQuestionFormIdGetRequest
 */
export interface ConsentApiConsentGetQuestionFormIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsentApiConsentGetQuestionFormIdGet
     */
    readonly formId: string

    /**
     * 
     * @type {}
     * @memberof ConsentApiConsentGetQuestionFormIdGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for consentSaveCorparateIdPost operation in ConsentApi.
 * @export
 * @interface ConsentApiConsentSaveCorparateIdPostRequest
 */
export interface ConsentApiConsentSaveCorparateIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsentApiConsentSaveCorparateIdPost
     */
    readonly corparateId: string

    /**
     * 
     * @type {}
     * @memberof ConsentApiConsentSaveCorparateIdPost
     */
    readonly UNKNOWN_PARAMETER_NAME?: 

    /**
     * 
     * @type {ConsentSaveCorparateIdPostRequest}
     * @memberof ConsentApiConsentSaveCorparateIdPost
     */
    readonly consentSaveCorparateIdPostRequest?: ConsentSaveCorparateIdPostRequest
}

/**
 * ConsentApi - object-oriented interface
 * @export
 * @class ConsentApi
 * @extends {BaseAPI}
 */
export class ConsentApi extends BaseAPI {
    /**
     * 
     * @param {ConsentApiConsentGetAnsweredCorparateIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public consentGetAnsweredCorparateIdGet(requestParameters: ConsentApiConsentGetAnsweredCorparateIdGetRequest, options?: AxiosRequestConfig) {
        return ConsentApiFp(this.configuration).consentGetAnsweredCorparateIdGet(requestParameters.corparateId, requestParameters.formId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ConsentApiConsentGetQuestionFormIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public consentGetQuestionFormIdGet(requestParameters: ConsentApiConsentGetQuestionFormIdGetRequest, options?: AxiosRequestConfig) {
        return ConsentApiFp(this.configuration).consentGetQuestionFormIdGet(requestParameters.formId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ConsentApiConsentSaveCorparateIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public consentSaveCorparateIdPost(requestParameters: ConsentApiConsentSaveCorparateIdPostRequest, options?: AxiosRequestConfig) {
        return ConsentApiFp(this.configuration).consentSaveCorparateIdPost(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, requestParameters.consentSaveCorparateIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
