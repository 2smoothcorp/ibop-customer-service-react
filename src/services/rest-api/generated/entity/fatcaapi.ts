/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.219
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Answer } from '../model';
// @ts-ignore
import { AnswerFACTA } from '../model';
// @ts-ignore
import { AnswerInput } from '../model';
// @ts-ignore
import { CustomerW8ben } from '../model';
// @ts-ignore
import { CustomerW9america } from '../model';
// @ts-ignore
import { FATCASaveW8CorparateIdPostRequest } from '../model';
// @ts-ignore
import { FATCASaveW9CorparateIdPostRequest } from '../model';
// @ts-ignore
import { GetFatcaW8Output } from '../model';
// @ts-ignore
import { GetFatcaW9Output } from '../model';
// @ts-ignore
import { GetTinOutput } from '../model';
// @ts-ignore
import { QuestionsOutput } from '../model';
// @ts-ignore
import { SaveTinInput } from '../model';
/**
 * FATCAApi - axios parameter creator
 * @export
 */
export const FATCAApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves answers for a FATCA test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCAAnswersCorparateIdGet: async (corparateId: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corparateId' is not null or undefined
            assertParamExists('fATCAAnswersCorparateIdGet', 'corparateId', corparateId)
            const localVarPath = `/FATCA/Answers/{corparateId}`
                .replace(`{${"corparateId"}}`, encodeURIComponent(String(corparateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Tins by Flow ID
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCAGetTinsCorparateIdGet: async (corparateId: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corparateId' is not null or undefined
            assertParamExists('fATCAGetTinsCorparateIdGet', 'corparateId', corparateId)
            const localVarPath = `/FATCA/GetTins/{corparateId}`
                .replace(`{${"corparateId"}}`, encodeURIComponent(String(corparateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves questions for a FATCA test.
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCAQuestionsGet: async (UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/FATCA/Questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves answers for a FATCA test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {Array<AnswerInput>} [answerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCASaveCorparateIdPost: async (corparateId: string, UNKNOWN_PARAMETER_NAME?: , answerInput?: Array<AnswerInput>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corparateId' is not null or undefined
            assertParamExists('fATCASaveCorparateIdPost', 'corparateId', corparateId)
            const localVarPath = `/FATCA/Save/{corparateId}`
                .replace(`{${"corparateId"}}`, encodeURIComponent(String(corparateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(answerInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves Tins
         * @param {string} corparateId 
         * @param {boolean} [isFatcaIndividualSelfCert] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {Array<SaveTinInput>} [saveTinInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCASaveTinsCorparateIdPost: async (corparateId: string, isFatcaIndividualSelfCert?: boolean, UNKNOWN_PARAMETER_NAME?: , saveTinInput?: Array<SaveTinInput>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corparateId' is not null or undefined
            assertParamExists('fATCASaveTinsCorparateIdPost', 'corparateId', corparateId)
            const localVarPath = `/FATCA/SaveTins/{corparateId}`
                .replace(`{${"corparateId"}}`, encodeURIComponent(String(corparateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (isFatcaIndividualSelfCert !== undefined) {
                localVarQueryParameter['isFatcaIndividualSelfCert'] = isFatcaIndividualSelfCert;
            }

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveTinInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves answers for a FATCA W8 test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {FATCASaveW8CorparateIdPostRequest} [fATCASaveW8CorparateIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCASaveW8CorparateIdPost: async (corparateId: string, UNKNOWN_PARAMETER_NAME?: , fATCASaveW8CorparateIdPostRequest?: FATCASaveW8CorparateIdPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corparateId' is not null or undefined
            assertParamExists('fATCASaveW8CorparateIdPost', 'corparateId', corparateId)
            const localVarPath = `/FATCA/SaveW8/{corparateId}`
                .replace(`{${"corparateId"}}`, encodeURIComponent(String(corparateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fATCASaveW8CorparateIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves answers for a FATCA W9 test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {FATCASaveW9CorparateIdPostRequest} [fATCASaveW9CorparateIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCASaveW9CorparateIdPost: async (corparateId: string, UNKNOWN_PARAMETER_NAME?: , fATCASaveW9CorparateIdPostRequest?: FATCASaveW9CorparateIdPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corparateId' is not null or undefined
            assertParamExists('fATCASaveW9CorparateIdPost', 'corparateId', corparateId)
            const localVarPath = `/FATCA/SaveW9/{corparateId}`
                .replace(`{${"corparateId"}}`, encodeURIComponent(String(corparateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fATCASaveW9CorparateIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA W8 test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCAW8CorparateIdGet: async (corparateId: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corparateId' is not null or undefined
            assertParamExists('fATCAW8CorparateIdGet', 'corparateId', corparateId)
            const localVarPath = `/FATCA/W8/{corparateId}`
                .replace(`{${"corparateId"}}`, encodeURIComponent(String(corparateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA W9 test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCAW9CorparateIdGet: async (corparateId: string, UNKNOWN_PARAMETER_NAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corparateId' is not null or undefined
            assertParamExists('fATCAW9CorparateIdGet', 'corparateId', corparateId)
            const localVarPath = `/FATCA/W9/{corparateId}`
                .replace(`{${"corparateId"}}`, encodeURIComponent(String(corparateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (UNKNOWN_PARAMETER_NAME != null) {
                localVarHeaderParameter['x-portal-token'] = typeof UNKNOWN_PARAMETER_NAME === 'string' 
                    ? UNKNOWN_PARAMETER_NAME 
                    : JSON.stringify(UNKNOWN_PARAMETER_NAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FATCAApi - functional programming interface
 * @export
 */
export const FATCAApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FATCAApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves answers for a FATCA test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCAAnswersCorparateIdGet(corparateId: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerFACTA>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCAAnswersCorparateIdGet(corparateId, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Tins by Flow ID
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCAGetTinsCorparateIdGet(corparateId: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetTinOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCAGetTinsCorparateIdGet(corparateId, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves questions for a FATCA test.
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCAQuestionsGet(UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionsOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCAQuestionsGet(UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Saves answers for a FATCA test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {Array<AnswerInput>} [answerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCASaveCorparateIdPost(corparateId: string, UNKNOWN_PARAMETER_NAME?: , answerInput?: Array<AnswerInput>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Answer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCASaveCorparateIdPost(corparateId, UNKNOWN_PARAMETER_NAME, answerInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Saves Tins
         * @param {string} corparateId 
         * @param {boolean} [isFatcaIndividualSelfCert] 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {Array<SaveTinInput>} [saveTinInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCASaveTinsCorparateIdPost(corparateId: string, isFatcaIndividualSelfCert?: boolean, UNKNOWN_PARAMETER_NAME?: , saveTinInput?: Array<SaveTinInput>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCASaveTinsCorparateIdPost(corparateId, isFatcaIndividualSelfCert, UNKNOWN_PARAMETER_NAME, saveTinInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Saves answers for a FATCA W8 test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {FATCASaveW8CorparateIdPostRequest} [fATCASaveW8CorparateIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCASaveW8CorparateIdPost(corparateId: string, UNKNOWN_PARAMETER_NAME?: , fATCASaveW8CorparateIdPostRequest?: FATCASaveW8CorparateIdPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerW8ben>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCASaveW8CorparateIdPost(corparateId, UNKNOWN_PARAMETER_NAME, fATCASaveW8CorparateIdPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Saves answers for a FATCA W9 test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {FATCASaveW9CorparateIdPostRequest} [fATCASaveW9CorparateIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCASaveW9CorparateIdPost(corparateId: string, UNKNOWN_PARAMETER_NAME?: , fATCASaveW9CorparateIdPostRequest?: FATCASaveW9CorparateIdPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerW9america>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCASaveW9CorparateIdPost(corparateId, UNKNOWN_PARAMETER_NAME, fATCASaveW9CorparateIdPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA W8 test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCAW8CorparateIdGet(corparateId: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFatcaW8Output>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCAW8CorparateIdGet(corparateId, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA W9 test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {} [UNKNOWN_PARAMETER_NAME] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCAW9CorparateIdGet(corparateId: string, UNKNOWN_PARAMETER_NAME?: , options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFatcaW9Output>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCAW9CorparateIdGet(corparateId, UNKNOWN_PARAMETER_NAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FATCAApi - factory interface
 * @export
 */
export const FATCAApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FATCAApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves answers for a FATCA test based on a specific flow ID.
         * @param {FATCAApiFATCAAnswersCorparateIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCAAnswersCorparateIdGet(requestParameters: FATCAApiFATCAAnswersCorparateIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<AnswerFACTA> {
            return localVarFp.fATCAAnswersCorparateIdGet(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Tins by Flow ID
         * @param {FATCAApiFATCAGetTinsCorparateIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCAGetTinsCorparateIdGet(requestParameters: FATCAApiFATCAGetTinsCorparateIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<Array<GetTinOutput>> {
            return localVarFp.fATCAGetTinsCorparateIdGet(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves questions for a FATCA test.
         * @param {FATCAApiFATCAQuestionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCAQuestionsGet(requestParameters: FATCAApiFATCAQuestionsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<QuestionsOutput> {
            return localVarFp.fATCAQuestionsGet(requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Saves answers for a FATCA test based on a specific flow ID.
         * @param {FATCAApiFATCASaveCorparateIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCASaveCorparateIdPost(requestParameters: FATCAApiFATCASaveCorparateIdPostRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Answer>> {
            return localVarFp.fATCASaveCorparateIdPost(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, requestParameters.answerInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Saves Tins
         * @param {FATCAApiFATCASaveTinsCorparateIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCASaveTinsCorparateIdPost(requestParameters: FATCAApiFATCASaveTinsCorparateIdPostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fATCASaveTinsCorparateIdPost(requestParameters.corparateId, requestParameters.isFatcaIndividualSelfCert, requestParameters.UNKNOWN_PARAMETER_NAME, requestParameters.saveTinInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Saves answers for a FATCA W8 test based on a specific flow ID.
         * @param {FATCAApiFATCASaveW8CorparateIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCASaveW8CorparateIdPost(requestParameters: FATCAApiFATCASaveW8CorparateIdPostRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerW8ben> {
            return localVarFp.fATCASaveW8CorparateIdPost(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, requestParameters.fATCASaveW8CorparateIdPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Saves answers for a FATCA W9 test based on a specific flow ID.
         * @param {FATCAApiFATCASaveW9CorparateIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCASaveW9CorparateIdPost(requestParameters: FATCAApiFATCASaveW9CorparateIdPostRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerW9america> {
            return localVarFp.fATCASaveW9CorparateIdPost(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, requestParameters.fATCASaveW9CorparateIdPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA W8 test based on a specific flow ID.
         * @param {FATCAApiFATCAW8CorparateIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCAW8CorparateIdGet(requestParameters: FATCAApiFATCAW8CorparateIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<GetFatcaW8Output> {
            return localVarFp.fATCAW8CorparateIdGet(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA W9 test based on a specific flow ID.
         * @param {FATCAApiFATCAW9CorparateIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCAW9CorparateIdGet(requestParameters: FATCAApiFATCAW9CorparateIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<GetFatcaW9Output> {
            return localVarFp.fATCAW9CorparateIdGet(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for fATCAAnswersCorparateIdGet operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCAAnswersCorparateIdGetRequest
 */
export interface FATCAApiFATCAAnswersCorparateIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCAAnswersCorparateIdGet
     */
    readonly corparateId: string

    /**
     * 
     * @type {}
     * @memberof FATCAApiFATCAAnswersCorparateIdGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for fATCAGetTinsCorparateIdGet operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCAGetTinsCorparateIdGetRequest
 */
export interface FATCAApiFATCAGetTinsCorparateIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCAGetTinsCorparateIdGet
     */
    readonly corparateId: string

    /**
     * 
     * @type {}
     * @memberof FATCAApiFATCAGetTinsCorparateIdGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for fATCAQuestionsGet operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCAQuestionsGetRequest
 */
export interface FATCAApiFATCAQuestionsGetRequest {
    /**
     * 
     * @type {}
     * @memberof FATCAApiFATCAQuestionsGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for fATCASaveCorparateIdPost operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCASaveCorparateIdPostRequest
 */
export interface FATCAApiFATCASaveCorparateIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCASaveCorparateIdPost
     */
    readonly corparateId: string

    /**
     * 
     * @type {}
     * @memberof FATCAApiFATCASaveCorparateIdPost
     */
    readonly UNKNOWN_PARAMETER_NAME?: 

    /**
     * 
     * @type {Array<AnswerInput>}
     * @memberof FATCAApiFATCASaveCorparateIdPost
     */
    readonly answerInput?: Array<AnswerInput>
}

/**
 * Request parameters for fATCASaveTinsCorparateIdPost operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCASaveTinsCorparateIdPostRequest
 */
export interface FATCAApiFATCASaveTinsCorparateIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCASaveTinsCorparateIdPost
     */
    readonly corparateId: string

    /**
     * 
     * @type {boolean}
     * @memberof FATCAApiFATCASaveTinsCorparateIdPost
     */
    readonly isFatcaIndividualSelfCert?: boolean

    /**
     * 
     * @type {}
     * @memberof FATCAApiFATCASaveTinsCorparateIdPost
     */
    readonly UNKNOWN_PARAMETER_NAME?: 

    /**
     * 
     * @type {Array<SaveTinInput>}
     * @memberof FATCAApiFATCASaveTinsCorparateIdPost
     */
    readonly saveTinInput?: Array<SaveTinInput>
}

/**
 * Request parameters for fATCASaveW8CorparateIdPost operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCASaveW8CorparateIdPostRequest
 */
export interface FATCAApiFATCASaveW8CorparateIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCASaveW8CorparateIdPost
     */
    readonly corparateId: string

    /**
     * 
     * @type {}
     * @memberof FATCAApiFATCASaveW8CorparateIdPost
     */
    readonly UNKNOWN_PARAMETER_NAME?: 

    /**
     * 
     * @type {FATCASaveW8CorparateIdPostRequest}
     * @memberof FATCAApiFATCASaveW8CorparateIdPost
     */
    readonly fATCASaveW8CorparateIdPostRequest?: FATCASaveW8CorparateIdPostRequest
}

/**
 * Request parameters for fATCASaveW9CorparateIdPost operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCASaveW9CorparateIdPostRequest
 */
export interface FATCAApiFATCASaveW9CorparateIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCASaveW9CorparateIdPost
     */
    readonly corparateId: string

    /**
     * 
     * @type {}
     * @memberof FATCAApiFATCASaveW9CorparateIdPost
     */
    readonly UNKNOWN_PARAMETER_NAME?: 

    /**
     * 
     * @type {FATCASaveW9CorparateIdPostRequest}
     * @memberof FATCAApiFATCASaveW9CorparateIdPost
     */
    readonly fATCASaveW9CorparateIdPostRequest?: FATCASaveW9CorparateIdPostRequest
}

/**
 * Request parameters for fATCAW8CorparateIdGet operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCAW8CorparateIdGetRequest
 */
export interface FATCAApiFATCAW8CorparateIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCAW8CorparateIdGet
     */
    readonly corparateId: string

    /**
     * 
     * @type {}
     * @memberof FATCAApiFATCAW8CorparateIdGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * Request parameters for fATCAW9CorparateIdGet operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCAW9CorparateIdGetRequest
 */
export interface FATCAApiFATCAW9CorparateIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCAW9CorparateIdGet
     */
    readonly corparateId: string

    /**
     * 
     * @type {}
     * @memberof FATCAApiFATCAW9CorparateIdGet
     */
    readonly UNKNOWN_PARAMETER_NAME?: 
}

/**
 * FATCAApi - object-oriented interface
 * @export
 * @class FATCAApi
 * @extends {BaseAPI}
 */
export class FATCAApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves answers for a FATCA test based on a specific flow ID.
     * @param {FATCAApiFATCAAnswersCorparateIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCAAnswersCorparateIdGet(requestParameters: FATCAApiFATCAAnswersCorparateIdGetRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCAAnswersCorparateIdGet(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Tins by Flow ID
     * @param {FATCAApiFATCAGetTinsCorparateIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCAGetTinsCorparateIdGet(requestParameters: FATCAApiFATCAGetTinsCorparateIdGetRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCAGetTinsCorparateIdGet(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves questions for a FATCA test.
     * @param {FATCAApiFATCAQuestionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCAQuestionsGet(requestParameters: FATCAApiFATCAQuestionsGetRequest = {}, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCAQuestionsGet(requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Saves answers for a FATCA test based on a specific flow ID.
     * @param {FATCAApiFATCASaveCorparateIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCASaveCorparateIdPost(requestParameters: FATCAApiFATCASaveCorparateIdPostRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCASaveCorparateIdPost(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, requestParameters.answerInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Saves Tins
     * @param {FATCAApiFATCASaveTinsCorparateIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCASaveTinsCorparateIdPost(requestParameters: FATCAApiFATCASaveTinsCorparateIdPostRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCASaveTinsCorparateIdPost(requestParameters.corparateId, requestParameters.isFatcaIndividualSelfCert, requestParameters.UNKNOWN_PARAMETER_NAME, requestParameters.saveTinInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Saves answers for a FATCA W8 test based on a specific flow ID.
     * @param {FATCAApiFATCASaveW8CorparateIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCASaveW8CorparateIdPost(requestParameters: FATCAApiFATCASaveW8CorparateIdPostRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCASaveW8CorparateIdPost(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, requestParameters.fATCASaveW8CorparateIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Saves answers for a FATCA W9 test based on a specific flow ID.
     * @param {FATCAApiFATCASaveW9CorparateIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCASaveW9CorparateIdPost(requestParameters: FATCAApiFATCASaveW9CorparateIdPostRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCASaveW9CorparateIdPost(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, requestParameters.fATCASaveW9CorparateIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves answers for a FATCA W8 test based on a specific flow ID.
     * @param {FATCAApiFATCAW8CorparateIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCAW8CorparateIdGet(requestParameters: FATCAApiFATCAW8CorparateIdGetRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCAW8CorparateIdGet(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves answers for a FATCA W9 test based on a specific flow ID.
     * @param {FATCAApiFATCAW9CorparateIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCAW9CorparateIdGet(requestParameters: FATCAApiFATCAW9CorparateIdGetRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCAW9CorparateIdGet(requestParameters.corparateId, requestParameters.UNKNOWN_PARAMETER_NAME, options).then((request) => request(this.axios, this.basePath));
    }
}
