/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.272
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AttorneyInfoOutputListDataResponse,
  BankInfoOutputListDataResponse,
  BeneficiaryOutputDataResponse,
  ContactInfoOutputDataResponse,
  CustomerProfileReportOutputCustomerProfileReportOutputPagination,
  CustomerValidDataResponse,
  FinancialInfoOutputDataResponse,
  IsValidOutputDataResponse,
  PersonalOutputDataResponse,
} from '../models';
import {
    AttorneyInfoOutputListDataResponseFromJSON,
    AttorneyInfoOutputListDataResponseToJSON,
    BankInfoOutputListDataResponseFromJSON,
    BankInfoOutputListDataResponseToJSON,
    BeneficiaryOutputDataResponseFromJSON,
    BeneficiaryOutputDataResponseToJSON,
    ContactInfoOutputDataResponseFromJSON,
    ContactInfoOutputDataResponseToJSON,
    CustomerProfileReportOutputCustomerProfileReportOutputPaginationFromJSON,
    CustomerProfileReportOutputCustomerProfileReportOutputPaginationToJSON,
    CustomerValidDataResponseFromJSON,
    CustomerValidDataResponseToJSON,
    FinancialInfoOutputDataResponseFromJSON,
    FinancialInfoOutputDataResponseToJSON,
    IsValidOutputDataResponseFromJSON,
    IsValidOutputDataResponseToJSON,
    PersonalOutputDataResponseFromJSON,
    PersonalOutputDataResponseToJSON,
} from '../models';

export interface CustomerProfileCheckValidGetRequest {
    referenceID?: string;
    employeeID?: string;
    xPortalToken?: string;
}

export interface CustomerProfileGetAllGetRequest {
    corporateID?: string;
    referenceID?: string;
    fullName?: string;
    backOfficeAccountNo?: string;
    startDate?: Date;
    endDate?: Date;
    pageIndex?: number;
    pageSize?: number;
    sortField?: string;
    sortDirection?: string;
    xPortalToken?: string;
}

export interface CustomerProfileGetAttorneyInfoGetRequest {
    corporateId?: string;
    xPortalToken?: string;
}

export interface CustomerProfileGetBankAtsInfoGetRequest {
    corporateId?: string;
    xPortalToken?: string;
}

export interface CustomerProfileGetBankDividendInfoGetRequest {
    corporateId?: string;
    xPortalToken?: string;
}

export interface CustomerProfileGetBeneficiaryInfoGetRequest {
    corporateId?: string;
    xPortalToken?: string;
}

export interface CustomerProfileGetContactInfoGetRequest {
    corporateId?: string;
    xPortalToken?: string;
}

export interface CustomerProfileGetFinancialInfoGetRequest {
    corporateId?: string;
    xPortalToken?: string;
}

export interface CustomerProfileGetPersonalInfoGetRequest {
    corporateId?: string;
    xPortalToken?: string;
}

export interface CustomerProfileIsValidGetRequest {
    referenceId?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    mobile?: string;
    xPortalToken?: string;
}

/**
 * 
 */
export class CustomerProfileApi extends runtime.BaseAPI {

    /**
     */
    async customerProfileCheckValidGetRaw(requestParameters: CustomerProfileCheckValidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerValidDataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.referenceID !== undefined) {
            queryParameters['ReferenceID'] = requestParameters.referenceID;
        }

        if (requestParameters.employeeID !== undefined) {
            queryParameters['EmployeeID'] = requestParameters.employeeID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/check-valid`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerValidDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async customerProfileCheckValidGet(requestParameters: CustomerProfileCheckValidGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerValidDataResponse> {
        const response = await this.customerProfileCheckValidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Customer Profile List
     */
    async customerProfileGetAllGetRaw(requestParameters: CustomerProfileGetAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerProfileReportOutputCustomerProfileReportOutputPagination>> {
        const queryParameters: any = {};

        if (requestParameters.corporateID !== undefined) {
            queryParameters['CorporateID'] = requestParameters.corporateID;
        }

        if (requestParameters.referenceID !== undefined) {
            queryParameters['ReferenceID'] = requestParameters.referenceID;
        }

        if (requestParameters.fullName !== undefined) {
            queryParameters['FullName'] = requestParameters.fullName;
        }

        if (requestParameters.backOfficeAccountNo !== undefined) {
            queryParameters['BackOfficeAccountNo'] = requestParameters.backOfficeAccountNo;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['StartDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['EndDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.pageIndex !== undefined) {
            queryParameters['PageIndex'] = requestParameters.pageIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortField !== undefined) {
            queryParameters['SortField'] = requestParameters.sortField;
        }

        if (requestParameters.sortDirection !== undefined) {
            queryParameters['SortDirection'] = requestParameters.sortDirection;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerProfileReportOutputCustomerProfileReportOutputPaginationFromJSON(jsonValue));
    }

    /**
     * Customer Profile List
     */
    async customerProfileGetAllGet(requestParameters: CustomerProfileGetAllGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerProfileReportOutputCustomerProfileReportOutputPagination> {
        const response = await this.customerProfileGetAllGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerProfileGetAttorneyInfoGetRaw(requestParameters: CustomerProfileGetAttorneyInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttorneyInfoOutputListDataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.corporateId !== undefined) {
            queryParameters['corporateId'] = requestParameters.corporateId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/GetAttorneyInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttorneyInfoOutputListDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async customerProfileGetAttorneyInfoGet(requestParameters: CustomerProfileGetAttorneyInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttorneyInfoOutputListDataResponse> {
        const response = await this.customerProfileGetAttorneyInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerProfileGetBankAtsInfoGetRaw(requestParameters: CustomerProfileGetBankAtsInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankInfoOutputListDataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.corporateId !== undefined) {
            queryParameters['corporateId'] = requestParameters.corporateId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/GetBankAtsInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankInfoOutputListDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async customerProfileGetBankAtsInfoGet(requestParameters: CustomerProfileGetBankAtsInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankInfoOutputListDataResponse> {
        const response = await this.customerProfileGetBankAtsInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerProfileGetBankDividendInfoGetRaw(requestParameters: CustomerProfileGetBankDividendInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankInfoOutputListDataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.corporateId !== undefined) {
            queryParameters['corporateId'] = requestParameters.corporateId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/GetBankDividendInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankInfoOutputListDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async customerProfileGetBankDividendInfoGet(requestParameters: CustomerProfileGetBankDividendInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankInfoOutputListDataResponse> {
        const response = await this.customerProfileGetBankDividendInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerProfileGetBeneficiaryInfoGetRaw(requestParameters: CustomerProfileGetBeneficiaryInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeneficiaryOutputDataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.corporateId !== undefined) {
            queryParameters['corporateId'] = requestParameters.corporateId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/GetBeneficiaryInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeneficiaryOutputDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async customerProfileGetBeneficiaryInfoGet(requestParameters: CustomerProfileGetBeneficiaryInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeneficiaryOutputDataResponse> {
        const response = await this.customerProfileGetBeneficiaryInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerProfileGetContactInfoGetRaw(requestParameters: CustomerProfileGetContactInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactInfoOutputDataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.corporateId !== undefined) {
            queryParameters['corporateId'] = requestParameters.corporateId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/GetContactInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactInfoOutputDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async customerProfileGetContactInfoGet(requestParameters: CustomerProfileGetContactInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactInfoOutputDataResponse> {
        const response = await this.customerProfileGetContactInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerProfileGetFinancialInfoGetRaw(requestParameters: CustomerProfileGetFinancialInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialInfoOutputDataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.corporateId !== undefined) {
            queryParameters['corporateId'] = requestParameters.corporateId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/GetFinancialInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialInfoOutputDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async customerProfileGetFinancialInfoGet(requestParameters: CustomerProfileGetFinancialInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialInfoOutputDataResponse> {
        const response = await this.customerProfileGetFinancialInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * API for getting all account setting as list
     */
    async customerProfileGetPersonalInfoGetRaw(requestParameters: CustomerProfileGetPersonalInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonalOutputDataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.corporateId !== undefined) {
            queryParameters['corporateId'] = requestParameters.corporateId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/GetPersonalInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonalOutputDataResponseFromJSON(jsonValue));
    }

    /**
     * API for getting all account setting as list
     */
    async customerProfileGetPersonalInfoGet(requestParameters: CustomerProfileGetPersonalInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonalOutputDataResponse> {
        const response = await this.customerProfileGetPersonalInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customerProfileIsValidGetRaw(requestParameters: CustomerProfileIsValidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IsValidOutputDataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.referenceId !== undefined) {
            queryParameters['referenceId'] = requestParameters.referenceId;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['firstName'] = requestParameters.firstName;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['lastName'] = requestParameters.lastName;
        }

        if (requestParameters.mobile !== undefined) {
            queryParameters['mobile'] = requestParameters.mobile;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/is-valid`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IsValidOutputDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async customerProfileIsValidGet(requestParameters: CustomerProfileIsValidGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IsValidOutputDataResponse> {
        const response = await this.customerProfileIsValidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
