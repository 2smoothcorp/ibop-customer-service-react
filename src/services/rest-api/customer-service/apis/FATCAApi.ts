/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.330
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Answer,
  AnswerFACTA,
  AnswerInput,
  CustomerW8ben,
  CustomerW9america,
  FATCASaveW8CorporateIdPostRequest,
  FATCASaveW9CorporateIdPostRequest,
  GetFatcaW8Output,
  GetFatcaW9Output,
  QuestionsOutput,
  SaveTinInput,
  TinInfoOutput,
} from '../models';
import {
    AnswerFromJSON,
    AnswerToJSON,
    AnswerFACTAFromJSON,
    AnswerFACTAToJSON,
    AnswerInputFromJSON,
    AnswerInputToJSON,
    CustomerW8benFromJSON,
    CustomerW8benToJSON,
    CustomerW9americaFromJSON,
    CustomerW9americaToJSON,
    FATCASaveW8CorporateIdPostRequestFromJSON,
    FATCASaveW8CorporateIdPostRequestToJSON,
    FATCASaveW9CorporateIdPostRequestFromJSON,
    FATCASaveW9CorporateIdPostRequestToJSON,
    GetFatcaW8OutputFromJSON,
    GetFatcaW8OutputToJSON,
    GetFatcaW9OutputFromJSON,
    GetFatcaW9OutputToJSON,
    QuestionsOutputFromJSON,
    QuestionsOutputToJSON,
    SaveTinInputFromJSON,
    SaveTinInputToJSON,
    TinInfoOutputFromJSON,
    TinInfoOutputToJSON,
} from '../models';

export interface FATCAAnswersCorporateIdGetRequest {
    corporateId: string;
    xPortalToken?: string;
}

export interface FATCAGetTinsCorporateIdGetRequest {
    corporateId: string;
    xPortalToken?: string;
}

export interface FATCAQuestionsGetRequest {
    xPortalToken?: string;
}

export interface FATCASaveCorporateIdPostRequest {
    corporateId: string;
    xPortalToken?: string;
    answerInput?: Array<AnswerInput>;
}

export interface FATCASaveTinsCorporateIdPostRequest {
    corporateId: string;
    isFatcaIndividualSelfCert?: boolean;
    xPortalToken?: string;
    saveTinInput?: Array<SaveTinInput>;
}

export interface FATCASaveW8CorporateIdPostOperationRequest {
    corporateId: string;
    xPortalToken?: string;
    fATCASaveW8CorporateIdPostRequest?: FATCASaveW8CorporateIdPostRequest;
}

export interface FATCASaveW9CorporateIdPostOperationRequest {
    corporateId: string;
    xPortalToken?: string;
    fATCASaveW9CorporateIdPostRequest?: FATCASaveW9CorporateIdPostRequest;
}

export interface FATCAW8CorporateIdGetRequest {
    corporateId: string;
    xPortalToken?: string;
}

export interface FATCAW9CorporateIdGetRequest {
    corporateId: string;
    xPortalToken?: string;
}

/**
 * 
 */
export class FATCAApi extends runtime.BaseAPI {

    /**
     * Retrieves answers for a FATCA test based on a specific flow ID.
     */
    async fATCAAnswersCorporateIdGetRaw(requestParameters: FATCAAnswersCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerFACTA>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling fATCAAnswersCorporateIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/FATCA/Answers/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerFACTAFromJSON(jsonValue));
    }

    /**
     * Retrieves answers for a FATCA test based on a specific flow ID.
     */
    async fATCAAnswersCorporateIdGet(requestParameters: FATCAAnswersCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerFACTA> {
        const response = await this.fATCAAnswersCorporateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Tins by Flow ID
     */
    async fATCAGetTinsCorporateIdGetRaw(requestParameters: FATCAGetTinsCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TinInfoOutput>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling fATCAGetTinsCorporateIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/FATCA/GetTins/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TinInfoOutputFromJSON(jsonValue));
    }

    /**
     * Get Tins by Flow ID
     */
    async fATCAGetTinsCorporateIdGet(requestParameters: FATCAGetTinsCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TinInfoOutput> {
        const response = await this.fATCAGetTinsCorporateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves questions for a FATCA test.
     */
    async fATCAQuestionsGetRaw(requestParameters: FATCAQuestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionsOutput>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/FATCA/Questions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionsOutputFromJSON(jsonValue));
    }

    /**
     * Retrieves questions for a FATCA test.
     */
    async fATCAQuestionsGet(requestParameters: FATCAQuestionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionsOutput> {
        const response = await this.fATCAQuestionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Saves answers for a FATCA test based on a specific flow ID.
     */
    async fATCASaveCorporateIdPostRaw(requestParameters: FATCASaveCorporateIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Answer>>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling fATCASaveCorporateIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/FATCA/Save/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.answerInput.map(AnswerInputToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AnswerFromJSON));
    }

    /**
     * Saves answers for a FATCA test based on a specific flow ID.
     */
    async fATCASaveCorporateIdPost(requestParameters: FATCASaveCorporateIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Answer>> {
        const response = await this.fATCASaveCorporateIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Saves Tins
     */
    async fATCASaveTinsCorporateIdPostRaw(requestParameters: FATCASaveTinsCorporateIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling fATCASaveTinsCorporateIdPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.isFatcaIndividualSelfCert !== undefined) {
            queryParameters['isFatcaIndividualSelfCert'] = requestParameters.isFatcaIndividualSelfCert;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/FATCA/SaveTins/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.saveTinInput.map(SaveTinInputToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Saves Tins
     */
    async fATCASaveTinsCorporateIdPost(requestParameters: FATCASaveTinsCorporateIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.fATCASaveTinsCorporateIdPostRaw(requestParameters, initOverrides);
    }

    /**
     * Saves answers for a FATCA W8 test based on a specific flow ID.
     */
    async fATCASaveW8CorporateIdPostRaw(requestParameters: FATCASaveW8CorporateIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerW8ben>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling fATCASaveW8CorporateIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/FATCA/SaveW8/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FATCASaveW8CorporateIdPostRequestToJSON(requestParameters.fATCASaveW8CorporateIdPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerW8benFromJSON(jsonValue));
    }

    /**
     * Saves answers for a FATCA W8 test based on a specific flow ID.
     */
    async fATCASaveW8CorporateIdPost(requestParameters: FATCASaveW8CorporateIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerW8ben> {
        const response = await this.fATCASaveW8CorporateIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Saves answers for a FATCA W9 test based on a specific flow ID.
     */
    async fATCASaveW9CorporateIdPostRaw(requestParameters: FATCASaveW9CorporateIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerW9america>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling fATCASaveW9CorporateIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/FATCA/SaveW9/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FATCASaveW9CorporateIdPostRequestToJSON(requestParameters.fATCASaveW9CorporateIdPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerW9americaFromJSON(jsonValue));
    }

    /**
     * Saves answers for a FATCA W9 test based on a specific flow ID.
     */
    async fATCASaveW9CorporateIdPost(requestParameters: FATCASaveW9CorporateIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerW9america> {
        const response = await this.fATCASaveW9CorporateIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves answers for a FATCA W8 test based on a specific flow ID.
     */
    async fATCAW8CorporateIdGetRaw(requestParameters: FATCAW8CorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFatcaW8Output>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling fATCAW8CorporateIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/FATCA/W8/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFatcaW8OutputFromJSON(jsonValue));
    }

    /**
     * Retrieves answers for a FATCA W8 test based on a specific flow ID.
     */
    async fATCAW8CorporateIdGet(requestParameters: FATCAW8CorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFatcaW8Output> {
        const response = await this.fATCAW8CorporateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves answers for a FATCA W9 test based on a specific flow ID.
     */
    async fATCAW9CorporateIdGetRaw(requestParameters: FATCAW9CorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFatcaW9Output>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling fATCAW9CorporateIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/FATCA/W9/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFatcaW9OutputFromJSON(jsonValue));
    }

    /**
     * Retrieves answers for a FATCA W9 test based on a specific flow ID.
     */
    async fATCAW9CorporateIdGet(requestParameters: FATCAW9CorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFatcaW9Output> {
        const response = await this.fATCAW9CorporateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
