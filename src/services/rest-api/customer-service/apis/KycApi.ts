/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.305
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressListDataResponse,
  AttorneyDataResponse,
  BaseResponse,
  KycAddressInfoInput,
  KycBeneficiaryInfoOutputDataResponse,
  KycGetAllOutputListDataResponse,
  KycPersonalInfoOutputDataResponse,
  KycResultResponseDataResponse,
  KycSpouseInfoOutputDataResponse,
  KycUpdatePersonalInfoCorporateIdPostRequest,
  KycUpdateSpouseInfoCorporateIdPostRequest,
  RiskLevelResultResponseDataResponse,
} from '../models';
import {
    AddressListDataResponseFromJSON,
    AddressListDataResponseToJSON,
    AttorneyDataResponseFromJSON,
    AttorneyDataResponseToJSON,
    BaseResponseFromJSON,
    BaseResponseToJSON,
    KycAddressInfoInputFromJSON,
    KycAddressInfoInputToJSON,
    KycBeneficiaryInfoOutputDataResponseFromJSON,
    KycBeneficiaryInfoOutputDataResponseToJSON,
    KycGetAllOutputListDataResponseFromJSON,
    KycGetAllOutputListDataResponseToJSON,
    KycPersonalInfoOutputDataResponseFromJSON,
    KycPersonalInfoOutputDataResponseToJSON,
    KycResultResponseDataResponseFromJSON,
    KycResultResponseDataResponseToJSON,
    KycSpouseInfoOutputDataResponseFromJSON,
    KycSpouseInfoOutputDataResponseToJSON,
    KycUpdatePersonalInfoCorporateIdPostRequestFromJSON,
    KycUpdatePersonalInfoCorporateIdPostRequestToJSON,
    KycUpdateSpouseInfoCorporateIdPostRequestFromJSON,
    KycUpdateSpouseInfoCorporateIdPostRequestToJSON,
    RiskLevelResultResponseDataResponseFromJSON,
    RiskLevelResultResponseDataResponseToJSON,
} from '../models';

export interface KycGetAddressInfoCorporateIdGetRequest {
    corporateId: string;
    xPortalToken?: string;
}

export interface KycGetAllGetRequest {
    corporateId?: string;
    referenceId?: string;
    name?: string;
    startDate?: Date;
    endDate?: Date;
    pageNumber?: number;
    pageSize?: number;
    xPortalToken?: string;
}

export interface KycGetAttorneyInfoCorporateIdGetRequest {
    corporateId: string;
    xPortalToken?: string;
}

export interface KycGetBeneficiaryInfoCorporateIdGetRequest {
    corporateId: string;
    xPortalToken?: string;
}

export interface KycGetPersonalInfoCorporateIdGetRequest {
    corporateId: string;
    xPortalToken?: string;
}

export interface KycGetRiskLevelScoreCorporateIdGetRequest {
    corporateId: string;
    xPortalToken?: string;
}

export interface KycGetSpouseInfoCorporateIdGetRequest {
    corporateId: string;
    xPortalToken?: string;
}

export interface KycKycScoreCorporateIdGetRequest {
    corporateId: string;
    xPortalToken?: string;
}

export interface KycUpdateAddressInfoCorporateIdPostRequest {
    corporateId: string;
    xPortalToken?: string;
    kycAddressInfoInput?: Array<KycAddressInfoInput>;
}

export interface KycUpdatePersonalInfoCorporateIdPostOperationRequest {
    corporateId: string;
    xPortalToken?: string;
    kycUpdatePersonalInfoCorporateIdPostRequest?: KycUpdatePersonalInfoCorporateIdPostRequest;
}

export interface KycUpdateSpouseInfoCorporateIdPostOperationRequest {
    corporateId: string;
    xPortalToken?: string;
    kycUpdateSpouseInfoCorporateIdPostRequest?: KycUpdateSpouseInfoCorporateIdPostRequest;
}

/**
 * 
 */
export class KycApi extends runtime.BaseAPI {

    /**
     */
    async kycGetAddressInfoCorporateIdGetRaw(requestParameters: KycGetAddressInfoCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressListDataResponse>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling kycGetAddressInfoCorporateIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Kyc/GetAddressInfo/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressListDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async kycGetAddressInfoCorporateIdGet(requestParameters: KycGetAddressInfoCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressListDataResponse> {
        const response = await this.kycGetAddressInfoCorporateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kycGetAllGetRaw(requestParameters: KycGetAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KycGetAllOutputListDataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.corporateId !== undefined) {
            queryParameters['CorporateId'] = requestParameters.corporateId;
        }

        if (requestParameters.referenceId !== undefined) {
            queryParameters['ReferenceId'] = requestParameters.referenceId;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['Name'] = requestParameters.name;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['StartDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['EndDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Kyc/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KycGetAllOutputListDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async kycGetAllGet(requestParameters: KycGetAllGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KycGetAllOutputListDataResponse> {
        const response = await this.kycGetAllGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kycGetAttorneyInfoCorporateIdGetRaw(requestParameters: KycGetAttorneyInfoCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttorneyDataResponse>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling kycGetAttorneyInfoCorporateIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Kyc/GetAttorneyInfo/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttorneyDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async kycGetAttorneyInfoCorporateIdGet(requestParameters: KycGetAttorneyInfoCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttorneyDataResponse> {
        const response = await this.kycGetAttorneyInfoCorporateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kycGetBeneficiaryInfoCorporateIdGetRaw(requestParameters: KycGetBeneficiaryInfoCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KycBeneficiaryInfoOutputDataResponse>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling kycGetBeneficiaryInfoCorporateIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Kyc/GetBeneficiaryInfo/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KycBeneficiaryInfoOutputDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async kycGetBeneficiaryInfoCorporateIdGet(requestParameters: KycGetBeneficiaryInfoCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KycBeneficiaryInfoOutputDataResponse> {
        const response = await this.kycGetBeneficiaryInfoCorporateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kycGetPersonalInfoCorporateIdGetRaw(requestParameters: KycGetPersonalInfoCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KycPersonalInfoOutputDataResponse>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling kycGetPersonalInfoCorporateIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Kyc/GetPersonalInfo/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KycPersonalInfoOutputDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async kycGetPersonalInfoCorporateIdGet(requestParameters: KycGetPersonalInfoCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KycPersonalInfoOutputDataResponse> {
        const response = await this.kycGetPersonalInfoCorporateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kycGetRiskLevelScoreCorporateIdGetRaw(requestParameters: KycGetRiskLevelScoreCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RiskLevelResultResponseDataResponse>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling kycGetRiskLevelScoreCorporateIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Kyc/GetRiskLevelScore/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RiskLevelResultResponseDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async kycGetRiskLevelScoreCorporateIdGet(requestParameters: KycGetRiskLevelScoreCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RiskLevelResultResponseDataResponse> {
        const response = await this.kycGetRiskLevelScoreCorporateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kycGetSpouseInfoCorporateIdGetRaw(requestParameters: KycGetSpouseInfoCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KycSpouseInfoOutputDataResponse>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling kycGetSpouseInfoCorporateIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Kyc/GetSpouseInfo/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KycSpouseInfoOutputDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async kycGetSpouseInfoCorporateIdGet(requestParameters: KycGetSpouseInfoCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KycSpouseInfoOutputDataResponse> {
        const response = await this.kycGetSpouseInfoCorporateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the KYC score and result for a specific flow.
     */
    async kycKycScoreCorporateIdGetRaw(requestParameters: KycKycScoreCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KycResultResponseDataResponse>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling kycKycScoreCorporateIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Kyc/KycScore/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KycResultResponseDataResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the KYC score and result for a specific flow.
     */
    async kycKycScoreCorporateIdGet(requestParameters: KycKycScoreCorporateIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KycResultResponseDataResponse> {
        const response = await this.kycKycScoreCorporateIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kycUpdateAddressInfoCorporateIdPostRaw(requestParameters: KycUpdateAddressInfoCorporateIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling kycUpdateAddressInfoCorporateIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Kyc/UpdateAddressInfo/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.kycAddressInfoInput.map(KycAddressInfoInputToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async kycUpdateAddressInfoCorporateIdPost(requestParameters: KycUpdateAddressInfoCorporateIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.kycUpdateAddressInfoCorporateIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kycUpdatePersonalInfoCorporateIdPostRaw(requestParameters: KycUpdatePersonalInfoCorporateIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling kycUpdatePersonalInfoCorporateIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Kyc/UpdatePersonalInfo/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KycUpdatePersonalInfoCorporateIdPostRequestToJSON(requestParameters.kycUpdatePersonalInfoCorporateIdPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async kycUpdatePersonalInfoCorporateIdPost(requestParameters: KycUpdatePersonalInfoCorporateIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.kycUpdatePersonalInfoCorporateIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async kycUpdateSpouseInfoCorporateIdPostRaw(requestParameters: KycUpdateSpouseInfoCorporateIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling kycUpdateSpouseInfoCorporateIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Kyc/UpdateSpouseInfo/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KycUpdateSpouseInfoCorporateIdPostRequestToJSON(requestParameters.kycUpdateSpouseInfoCorporateIdPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async kycUpdateSpouseInfoCorporateIdPost(requestParameters: KycUpdateSpouseInfoCorporateIdPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.kycUpdateSpouseInfoCorporateIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
