/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.268
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressInfoResponseDataResponse,
  AttorneyInfoResponseDataResponse,
  BankInfoResponseDataResponse,
  BaseResponse,
  BeneficiaryInfoResponseDataResponse,
  CustomerInfoListResponsePagination,
  CustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest,
  DocReceiveAddressInfoResponseDataResponse,
  EmergencyContactInfoResponseDataResponse,
  FinancialInfoResponseDataResponse,
  MenuResponseListDataResponse,
  OccupationInfoResponseDataResponse,
  PersonalInfoResponseDataResponse,
  PoliticRelationInfoResponseDataResponse,
  SpouseInfoResponseDataResponse,
} from '../models';
import {
    AddressInfoResponseDataResponseFromJSON,
    AddressInfoResponseDataResponseToJSON,
    AttorneyInfoResponseDataResponseFromJSON,
    AttorneyInfoResponseDataResponseToJSON,
    BankInfoResponseDataResponseFromJSON,
    BankInfoResponseDataResponseToJSON,
    BaseResponseFromJSON,
    BaseResponseToJSON,
    BeneficiaryInfoResponseDataResponseFromJSON,
    BeneficiaryInfoResponseDataResponseToJSON,
    CustomerInfoListResponsePaginationFromJSON,
    CustomerInfoListResponsePaginationToJSON,
    CustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequestFromJSON,
    CustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequestToJSON,
    DocReceiveAddressInfoResponseDataResponseFromJSON,
    DocReceiveAddressInfoResponseDataResponseToJSON,
    EmergencyContactInfoResponseDataResponseFromJSON,
    EmergencyContactInfoResponseDataResponseToJSON,
    FinancialInfoResponseDataResponseFromJSON,
    FinancialInfoResponseDataResponseToJSON,
    MenuResponseListDataResponseFromJSON,
    MenuResponseListDataResponseToJSON,
    OccupationInfoResponseDataResponseFromJSON,
    OccupationInfoResponseDataResponseToJSON,
    PersonalInfoResponseDataResponseFromJSON,
    PersonalInfoResponseDataResponseToJSON,
    PoliticRelationInfoResponseDataResponseFromJSON,
    PoliticRelationInfoResponseDataResponseToJSON,
    SpouseInfoResponseDataResponseFromJSON,
    SpouseInfoResponseDataResponseToJSON,
} from '../models';

export interface CustomerProfileCustomerInfoListGetRequest {
    corporateID?: string;
    referenceID?: string;
    fullName?: string;
    emailNumber?: string;
    pageIndex?: number;
    pageSize?: number;
    sortField?: string;
    sortDirection?: string;
    xPortalToken?: string;
}

export interface CustomerProfileCustomerInfoMenuGetRequest {
    corporateId?: string;
    xPortalToken?: string;
}

export interface CustomerProfileCustomerInformationATSGetRequest {
    referenceId: string;
    xPortalToken?: string;
}

export interface CustomerProfileCustomerInformationAddressInfoGetRequest {
    referenceId: string;
    addressTypeCode?: string;
    xPortalToken?: string;
}

export interface CustomerProfileCustomerInformationAttorneyInfoGetRequest {
    referenceId: string;
    xPortalToken?: string;
}

export interface CustomerProfileCustomerInformationBeneficiaryInfoGetRequest {
    referenceId: string;
    xPortalToken?: string;
}

export interface CustomerProfileCustomerInformationDocReceiveInfoGetRequest {
    referenceId: string;
    docReceiveType?: string;
    xPortalToken?: string;
}

export interface CustomerProfileCustomerInformationEDividendGetRequest {
    referenceId: string;
    xPortalToken?: string;
}

export interface CustomerProfileCustomerInformationEmergencyContactInfoGetRequest {
    referenceId: string;
    xPortalToken?: string;
}

export interface CustomerProfileCustomerInformationFinancialInfoGetRequest {
    referenceId: string;
    xPortalToken?: string;
}

export interface CustomerProfileCustomerInformationOccupationInfoGetRequest {
    referenceId: string;
    xPortalToken?: string;
}

export interface CustomerProfileCustomerInformationPersonalInfoCorporateIdPutOperationRequest {
    corporateId: string;
    xPortalToken?: string;
    customerProfileCustomerInformationPersonalInfoCorporateIdPutRequest?: CustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest;
}

export interface CustomerProfileCustomerInformationPersonalInfoGetRequest {
    referenceId: string;
    xPortalToken?: string;
}

export interface CustomerProfileCustomerInformationPoliticRelationInfoGetRequest {
    referenceId: string;
    xPortalToken?: string;
}

export interface CustomerProfileCustomerInformationSpouseInfoGetRequest {
    referenceId: string;
    xPortalToken?: string;
}

/**
 * 
 */
export class CustomerProfileV2Api extends runtime.BaseAPI {

    /**
     * Customer Information List v2
     */
    async customerProfileCustomerInfoListGetRaw(requestParameters: CustomerProfileCustomerInfoListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomerInfoListResponsePagination>> {
        const queryParameters: any = {};

        if (requestParameters.corporateID !== undefined) {
            queryParameters['CorporateID'] = requestParameters.corporateID;
        }

        if (requestParameters.referenceID !== undefined) {
            queryParameters['ReferenceID'] = requestParameters.referenceID;
        }

        if (requestParameters.fullName !== undefined) {
            queryParameters['FullName'] = requestParameters.fullName;
        }

        if (requestParameters.emailNumber !== undefined) {
            queryParameters['EmailNumber'] = requestParameters.emailNumber;
        }

        if (requestParameters.pageIndex !== undefined) {
            queryParameters['PageIndex'] = requestParameters.pageIndex;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.sortField !== undefined) {
            queryParameters['SortField'] = requestParameters.sortField;
        }

        if (requestParameters.sortDirection !== undefined) {
            queryParameters['SortDirection'] = requestParameters.sortDirection;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInfoList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerInfoListResponsePaginationFromJSON(jsonValue));
    }

    /**
     * Customer Information List v2
     */
    async customerProfileCustomerInfoListGet(requestParameters: CustomerProfileCustomerInfoListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomerInfoListResponsePagination> {
        const response = await this.customerProfileCustomerInfoListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CustomerInformation Menu
     */
    async customerProfileCustomerInfoMenuGetRaw(requestParameters: CustomerProfileCustomerInfoMenuGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MenuResponseListDataResponse>> {
        const queryParameters: any = {};

        if (requestParameters.corporateId !== undefined) {
            queryParameters['corporateId'] = requestParameters.corporateId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInfoMenu`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MenuResponseListDataResponseFromJSON(jsonValue));
    }

    /**
     * CustomerInformation Menu
     */
    async customerProfileCustomerInfoMenuGet(requestParameters: CustomerProfileCustomerInfoMenuGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MenuResponseListDataResponse> {
        const response = await this.customerProfileCustomerInfoMenuGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get ATS
     */
    async customerProfileCustomerInformationATSGetRaw(requestParameters: CustomerProfileCustomerInformationATSGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankInfoResponseDataResponse>> {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling customerProfileCustomerInformationATSGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.referenceId !== undefined) {
            queryParameters['ReferenceId'] = requestParameters.referenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInformation/ATS`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankInfoResponseDataResponseFromJSON(jsonValue));
    }

    /**
     * Get ATS
     */
    async customerProfileCustomerInformationATSGet(requestParameters: CustomerProfileCustomerInformationATSGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankInfoResponseDataResponse> {
        const response = await this.customerProfileCustomerInformationATSGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AddressInfo
     */
    async customerProfileCustomerInformationAddressInfoGetRaw(requestParameters: CustomerProfileCustomerInformationAddressInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressInfoResponseDataResponse>> {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling customerProfileCustomerInformationAddressInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.addressTypeCode !== undefined) {
            queryParameters['AddressTypeCode'] = requestParameters.addressTypeCode;
        }

        if (requestParameters.referenceId !== undefined) {
            queryParameters['ReferenceId'] = requestParameters.referenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInformation/AddressInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressInfoResponseDataResponseFromJSON(jsonValue));
    }

    /**
     * Get AddressInfo
     */
    async customerProfileCustomerInformationAddressInfoGet(requestParameters: CustomerProfileCustomerInformationAddressInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressInfoResponseDataResponse> {
        const response = await this.customerProfileCustomerInformationAddressInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get AttorneyInfo
     */
    async customerProfileCustomerInformationAttorneyInfoGetRaw(requestParameters: CustomerProfileCustomerInformationAttorneyInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttorneyInfoResponseDataResponse>> {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling customerProfileCustomerInformationAttorneyInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.referenceId !== undefined) {
            queryParameters['ReferenceId'] = requestParameters.referenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInformation/AttorneyInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttorneyInfoResponseDataResponseFromJSON(jsonValue));
    }

    /**
     * Get AttorneyInfo
     */
    async customerProfileCustomerInformationAttorneyInfoGet(requestParameters: CustomerProfileCustomerInformationAttorneyInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttorneyInfoResponseDataResponse> {
        const response = await this.customerProfileCustomerInformationAttorneyInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get BeneficiaryInfo
     */
    async customerProfileCustomerInformationBeneficiaryInfoGetRaw(requestParameters: CustomerProfileCustomerInformationBeneficiaryInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BeneficiaryInfoResponseDataResponse>> {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling customerProfileCustomerInformationBeneficiaryInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.referenceId !== undefined) {
            queryParameters['ReferenceId'] = requestParameters.referenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInformation/BeneficiaryInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BeneficiaryInfoResponseDataResponseFromJSON(jsonValue));
    }

    /**
     * Get BeneficiaryInfo
     */
    async customerProfileCustomerInformationBeneficiaryInfoGet(requestParameters: CustomerProfileCustomerInformationBeneficiaryInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BeneficiaryInfoResponseDataResponse> {
        const response = await this.customerProfileCustomerInformationBeneficiaryInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get DocReceiveInfo
     */
    async customerProfileCustomerInformationDocReceiveInfoGetRaw(requestParameters: CustomerProfileCustomerInformationDocReceiveInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocReceiveAddressInfoResponseDataResponse>> {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling customerProfileCustomerInformationDocReceiveInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.docReceiveType !== undefined) {
            queryParameters['DocReceiveType'] = requestParameters.docReceiveType;
        }

        if (requestParameters.referenceId !== undefined) {
            queryParameters['ReferenceId'] = requestParameters.referenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInformation/DocReceiveInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocReceiveAddressInfoResponseDataResponseFromJSON(jsonValue));
    }

    /**
     * Get DocReceiveInfo
     */
    async customerProfileCustomerInformationDocReceiveInfoGet(requestParameters: CustomerProfileCustomerInformationDocReceiveInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocReceiveAddressInfoResponseDataResponse> {
        const response = await this.customerProfileCustomerInformationDocReceiveInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get E-Dividend
     */
    async customerProfileCustomerInformationEDividendGetRaw(requestParameters: CustomerProfileCustomerInformationEDividendGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankInfoResponseDataResponse>> {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling customerProfileCustomerInformationEDividendGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.referenceId !== undefined) {
            queryParameters['ReferenceId'] = requestParameters.referenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInformation/EDividend`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankInfoResponseDataResponseFromJSON(jsonValue));
    }

    /**
     * Get E-Dividend
     */
    async customerProfileCustomerInformationEDividendGet(requestParameters: CustomerProfileCustomerInformationEDividendGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankInfoResponseDataResponse> {
        const response = await this.customerProfileCustomerInformationEDividendGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get EmergencyContactInfo
     */
    async customerProfileCustomerInformationEmergencyContactInfoGetRaw(requestParameters: CustomerProfileCustomerInformationEmergencyContactInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmergencyContactInfoResponseDataResponse>> {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling customerProfileCustomerInformationEmergencyContactInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.referenceId !== undefined) {
            queryParameters['ReferenceId'] = requestParameters.referenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInformation/EmergencyContactInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmergencyContactInfoResponseDataResponseFromJSON(jsonValue));
    }

    /**
     * Get EmergencyContactInfo
     */
    async customerProfileCustomerInformationEmergencyContactInfoGet(requestParameters: CustomerProfileCustomerInformationEmergencyContactInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmergencyContactInfoResponseDataResponse> {
        const response = await this.customerProfileCustomerInformationEmergencyContactInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get FinancialInfo
     */
    async customerProfileCustomerInformationFinancialInfoGetRaw(requestParameters: CustomerProfileCustomerInformationFinancialInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialInfoResponseDataResponse>> {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling customerProfileCustomerInformationFinancialInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.referenceId !== undefined) {
            queryParameters['ReferenceId'] = requestParameters.referenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInformation/FinancialInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialInfoResponseDataResponseFromJSON(jsonValue));
    }

    /**
     * Get FinancialInfo
     */
    async customerProfileCustomerInformationFinancialInfoGet(requestParameters: CustomerProfileCustomerInformationFinancialInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialInfoResponseDataResponse> {
        const response = await this.customerProfileCustomerInformationFinancialInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get OccupationInfo
     */
    async customerProfileCustomerInformationOccupationInfoGetRaw(requestParameters: CustomerProfileCustomerInformationOccupationInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OccupationInfoResponseDataResponse>> {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling customerProfileCustomerInformationOccupationInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.referenceId !== undefined) {
            queryParameters['ReferenceId'] = requestParameters.referenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInformation/OccupationInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OccupationInfoResponseDataResponseFromJSON(jsonValue));
    }

    /**
     * Get OccupationInfo
     */
    async customerProfileCustomerInformationOccupationInfoGet(requestParameters: CustomerProfileCustomerInformationOccupationInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OccupationInfoResponseDataResponse> {
        const response = await this.customerProfileCustomerInformationOccupationInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update CustomerInformation PersonalInfo
     */
    async customerProfileCustomerInformationPersonalInfoCorporateIdPutRaw(requestParameters: CustomerProfileCustomerInformationPersonalInfoCorporateIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BaseResponse>> {
        if (requestParameters.corporateId === null || requestParameters.corporateId === undefined) {
            throw new runtime.RequiredError('corporateId','Required parameter requestParameters.corporateId was null or undefined when calling customerProfileCustomerInformationPersonalInfoCorporateIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInformation/PersonalInfo/{corporateId}`.replace(`{${"corporateId"}}`, encodeURIComponent(String(requestParameters.corporateId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequestToJSON(requestParameters.customerProfileCustomerInformationPersonalInfoCorporateIdPutRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BaseResponseFromJSON(jsonValue));
    }

    /**
     * Update CustomerInformation PersonalInfo
     */
    async customerProfileCustomerInformationPersonalInfoCorporateIdPut(requestParameters: CustomerProfileCustomerInformationPersonalInfoCorporateIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BaseResponse> {
        const response = await this.customerProfileCustomerInformationPersonalInfoCorporateIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get PersonalInfo
     */
    async customerProfileCustomerInformationPersonalInfoGetRaw(requestParameters: CustomerProfileCustomerInformationPersonalInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonalInfoResponseDataResponse>> {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling customerProfileCustomerInformationPersonalInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.referenceId !== undefined) {
            queryParameters['ReferenceId'] = requestParameters.referenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInformation/PersonalInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonalInfoResponseDataResponseFromJSON(jsonValue));
    }

    /**
     * Get PersonalInfo
     */
    async customerProfileCustomerInformationPersonalInfoGet(requestParameters: CustomerProfileCustomerInformationPersonalInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonalInfoResponseDataResponse> {
        const response = await this.customerProfileCustomerInformationPersonalInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get PoliticRelationInfo
     */
    async customerProfileCustomerInformationPoliticRelationInfoGetRaw(requestParameters: CustomerProfileCustomerInformationPoliticRelationInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PoliticRelationInfoResponseDataResponse>> {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling customerProfileCustomerInformationPoliticRelationInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.referenceId !== undefined) {
            queryParameters['ReferenceId'] = requestParameters.referenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInformation/PoliticRelationInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PoliticRelationInfoResponseDataResponseFromJSON(jsonValue));
    }

    /**
     * Get PoliticRelationInfo
     */
    async customerProfileCustomerInformationPoliticRelationInfoGet(requestParameters: CustomerProfileCustomerInformationPoliticRelationInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PoliticRelationInfoResponseDataResponse> {
        const response = await this.customerProfileCustomerInformationPoliticRelationInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SpouseInfo
     */
    async customerProfileCustomerInformationSpouseInfoGetRaw(requestParameters: CustomerProfileCustomerInformationSpouseInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SpouseInfoResponseDataResponse>> {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling customerProfileCustomerInformationSpouseInfoGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.referenceId !== undefined) {
            queryParameters['ReferenceId'] = requestParameters.referenceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xPortalToken !== undefined && requestParameters.xPortalToken !== null) {
            headerParameters['x-portal-token'] = String(requestParameters.xPortalToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customer-profile/CustomerInformation/SpouseInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpouseInfoResponseDataResponseFromJSON(jsonValue));
    }

    /**
     * Get SpouseInfo
     */
    async customerProfileCustomerInformationSpouseInfoGet(requestParameters: CustomerProfileCustomerInformationSpouseInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SpouseInfoResponseDataResponse> {
        const response = await this.customerProfileCustomerInformationSpouseInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
