/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.299
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Answer
 */
export interface Answer {
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    answerId?: number;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    questionnaireCode?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    questionId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    choiceId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    refId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    refType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    answerTextTh?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    answerTextEn?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    sequence?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    score?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    logFlag?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    logUser?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Answer
     */
    logTimestamp?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    choiceCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    questionTextTh?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    questionTextEn?: string | null;
}

/**
 * Check if a given object implements the Answer interface.
 */
export function instanceOfAnswer(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AnswerFromJSON(json: any): Answer {
    return AnswerFromJSONTyped(json, false);
}

export function AnswerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Answer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'answerId': !exists(json, 'answerId') ? undefined : json['answerId'],
        'questionnaireCode': !exists(json, 'questionnaireCode') ? undefined : json['questionnaireCode'],
        'questionId': !exists(json, 'questionId') ? undefined : json['questionId'],
        'choiceId': !exists(json, 'choiceId') ? undefined : json['choiceId'],
        'refId': !exists(json, 'refId') ? undefined : json['refId'],
        'refType': !exists(json, 'refType') ? undefined : json['refType'],
        'answerTextTh': !exists(json, 'answerTextTh') ? undefined : json['answerTextTh'],
        'answerTextEn': !exists(json, 'answerTextEn') ? undefined : json['answerTextEn'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'score': !exists(json, 'score') ? undefined : json['score'],
        'logFlag': !exists(json, 'logFlag') ? undefined : json['logFlag'],
        'logUser': !exists(json, 'logUser') ? undefined : json['logUser'],
        'logTimestamp': !exists(json, 'logTimestamp') ? undefined : (json['logTimestamp'] === null ? null : new Date(json['logTimestamp'])),
        'choiceCode': !exists(json, 'choiceCode') ? undefined : json['choiceCode'],
        'questionTextTh': !exists(json, 'questionTextTh') ? undefined : json['questionTextTh'],
        'questionTextEn': !exists(json, 'questionTextEn') ? undefined : json['questionTextEn'],
    };
}

export function AnswerToJSON(value?: Answer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'answerId': value.answerId,
        'questionnaireCode': value.questionnaireCode,
        'questionId': value.questionId,
        'choiceId': value.choiceId,
        'refId': value.refId,
        'refType': value.refType,
        'answerTextTh': value.answerTextTh,
        'answerTextEn': value.answerTextEn,
        'sequence': value.sequence,
        'score': value.score,
        'logFlag': value.logFlag,
        'logUser': value.logUser,
        'logTimestamp': value.logTimestamp === undefined ? undefined : (value.logTimestamp === null ? null : value.logTimestamp.toISOString()),
        'choiceCode': value.choiceCode,
        'questionTextTh': value.questionTextTh,
        'questionTextEn': value.questionTextEn,
    };
}

