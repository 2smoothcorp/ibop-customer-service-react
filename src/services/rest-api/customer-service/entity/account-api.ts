/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.267
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Account } from '../model';
// @ts-ignore
import { AccountActionLogHistoriesOutputPagination } from '../model';
// @ts-ignore
import { AccountActivateProductPostRequest } from '../model';
// @ts-ignore
import { AccountCreateProfilePostRequest } from '../model';
// @ts-ignore
import { AccountReserveAccountNoPostRequest } from '../model';
// @ts-ignore
import { GetAccountByRefIdOutput } from '../model';
// @ts-ignore
import { ReserveAccountNoOutput } from '../model';
// @ts-ignore
import { SelectProductGetAllOutputPagination } from '../model';
/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} corporateId 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAccountsByCustomerCorporateIdGet: async (corporateId: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corporateId' is not null or undefined
            assertParamExists('accountAccountsByCustomerCorporateIdGet', 'corporateId', corporateId)
            const localVarPath = `/Account/AccountsByCustomer/{corporateId}`
                .replace(`{${"corporateId"}}`, encodeURIComponent(String(corporateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} referenceId 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAccountsByRefIdReferenceIdGet: async (referenceId: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceId' is not null or undefined
            assertParamExists('accountAccountsByRefIdReferenceIdGet', 'referenceId', referenceId)
            const localVarPath = `/Account/AccountsByRefId/{referenceId}`
                .replace(`{${"referenceId"}}`, encodeURIComponent(String(referenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [xPortalToken] 
         * @param {AccountActivateProductPostRequest} [accountActivateProductPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountActivateProductPost: async (xPortalToken?: string, accountActivateProductPostRequest?: AccountActivateProductPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Account/ActivateProduct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountActivateProductPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [xPortalToken] 
         * @param {AccountCreateProfilePostRequest} [accountCreateProfilePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountCreateProfilePost: async (xPortalToken?: string, accountCreateProfilePostRequest?: AccountCreateProfilePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Account/CreateProfile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreateProfilePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [refId] 
         * @param {string} [refType] 
         * @param {string} [accountNo] 
         * @param {string} [accountType] 
         * @param {string} [corporateId] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGetAllGet: async (refId?: string, refType?: string, accountNo?: string, accountType?: string, corporateId?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Account/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (refId !== undefined) {
                localVarQueryParameter['RefId'] = refId;
            }

            if (refType !== undefined) {
                localVarQueryParameter['RefType'] = refType;
            }

            if (accountNo !== undefined) {
                localVarQueryParameter['AccountNo'] = accountNo;
            }

            if (accountType !== undefined) {
                localVarQueryParameter['AccountType'] = accountType;
            }

            if (corporateId !== undefined) {
                localVarQueryParameter['CorporateId'] = corporateId;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountNo 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGetRefIdAccountNoGet: async (accountNo: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountNo' is not null or undefined
            assertParamExists('accountGetRefIdAccountNoGet', 'accountNo', accountNo)
            const localVarPath = `/Account/GetRefId/{accountNo}`
                .replace(`{${"accountNo"}}`, encodeURIComponent(String(accountNo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [refId] 
         * @param {string} [refType] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountHistoriesGet: async (refId?: string, refType?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Account/Histories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (refId !== undefined) {
                localVarQueryParameter['RefId'] = refId;
            }

            if (refType !== undefined) {
                localVarQueryParameter['RefType'] = refType;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [xPortalToken] 
         * @param {AccountReserveAccountNoPostRequest} [accountReserveAccountNoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountReserveAccountNoPost: async (xPortalToken?: string, accountReserveAccountNoPostRequest?: AccountReserveAccountNoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Account/ReserveAccountNo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountReserveAccountNoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} corporateId 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountAccountsByCustomerCorporateIdGet(corporateId: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountAccountsByCustomerCorporateIdGet(corporateId, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} referenceId 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountAccountsByRefIdReferenceIdGet(referenceId: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAccountByRefIdOutput>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountAccountsByRefIdReferenceIdGet(referenceId, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [xPortalToken] 
         * @param {AccountActivateProductPostRequest} [accountActivateProductPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountActivateProductPost(xPortalToken?: string, accountActivateProductPostRequest?: AccountActivateProductPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountActivateProductPost(xPortalToken, accountActivateProductPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [xPortalToken] 
         * @param {AccountCreateProfilePostRequest} [accountCreateProfilePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountCreateProfilePost(xPortalToken?: string, accountCreateProfilePostRequest?: AccountCreateProfilePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountCreateProfilePost(xPortalToken, accountCreateProfilePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [refId] 
         * @param {string} [refType] 
         * @param {string} [accountNo] 
         * @param {string} [accountType] 
         * @param {string} [corporateId] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountGetAllGet(refId?: string, refType?: string, accountNo?: string, accountType?: string, corporateId?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelectProductGetAllOutputPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountGetAllGet(refId, refType, accountNo, accountType, corporateId, pageIndex, pageSize, sortField, sortDirection, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} accountNo 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountGetRefIdAccountNoGet(accountNo: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountGetRefIdAccountNoGet(accountNo, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [refId] 
         * @param {string} [refType] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountHistoriesGet(refId?: string, refType?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountActionLogHistoriesOutputPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountHistoriesGet(refId, refType, pageIndex, pageSize, sortField, sortDirection, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [xPortalToken] 
         * @param {AccountReserveAccountNoPostRequest} [accountReserveAccountNoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountReserveAccountNoPost(xPortalToken?: string, accountReserveAccountNoPostRequest?: AccountReserveAccountNoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReserveAccountNoOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountReserveAccountNoPost(xPortalToken, accountReserveAccountNoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {AccountApiAccountAccountsByCustomerCorporateIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAccountsByCustomerCorporateIdGet(requestParameters: AccountApiAccountAccountsByCustomerCorporateIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Account>> {
            return localVarFp.accountAccountsByCustomerCorporateIdGet(requestParameters.corporateId, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiAccountAccountsByRefIdReferenceIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAccountsByRefIdReferenceIdGet(requestParameters: AccountApiAccountAccountsByRefIdReferenceIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<Array<GetAccountByRefIdOutput>> {
            return localVarFp.accountAccountsByRefIdReferenceIdGet(requestParameters.referenceId, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiAccountActivateProductPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountActivateProductPost(requestParameters: AccountApiAccountActivateProductPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountActivateProductPost(requestParameters.xPortalToken, requestParameters.accountActivateProductPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiAccountCreateProfilePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountCreateProfilePost(requestParameters: AccountApiAccountCreateProfilePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountCreateProfilePost(requestParameters.xPortalToken, requestParameters.accountCreateProfilePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiAccountGetAllGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGetAllGet(requestParameters: AccountApiAccountGetAllGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SelectProductGetAllOutputPagination> {
            return localVarFp.accountGetAllGet(requestParameters.refId, requestParameters.refType, requestParameters.accountNo, requestParameters.accountType, requestParameters.corporateId, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiAccountGetRefIdAccountNoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGetRefIdAccountNoGet(requestParameters: AccountApiAccountGetRefIdAccountNoGetRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.accountGetRefIdAccountNoGet(requestParameters.accountNo, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiAccountHistoriesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountHistoriesGet(requestParameters: AccountApiAccountHistoriesGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccountActionLogHistoriesOutputPagination> {
            return localVarFp.accountHistoriesGet(requestParameters.refId, requestParameters.refType, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountApiAccountReserveAccountNoPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountReserveAccountNoPost(requestParameters: AccountApiAccountReserveAccountNoPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ReserveAccountNoOutput> {
            return localVarFp.accountReserveAccountNoPost(requestParameters.xPortalToken, requestParameters.accountReserveAccountNoPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for accountAccountsByCustomerCorporateIdGet operation in AccountApi.
 * @export
 * @interface AccountApiAccountAccountsByCustomerCorporateIdGetRequest
 */
export interface AccountApiAccountAccountsByCustomerCorporateIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountAccountsByCustomerCorporateIdGet
     */
    readonly corporateId: string

    /**
     * 
     * @type {}
     * @memberof AccountApiAccountAccountsByCustomerCorporateIdGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for accountAccountsByRefIdReferenceIdGet operation in AccountApi.
 * @export
 * @interface AccountApiAccountAccountsByRefIdReferenceIdGetRequest
 */
export interface AccountApiAccountAccountsByRefIdReferenceIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountAccountsByRefIdReferenceIdGet
     */
    readonly referenceId: string

    /**
     * 
     * @type {}
     * @memberof AccountApiAccountAccountsByRefIdReferenceIdGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for accountActivateProductPost operation in AccountApi.
 * @export
 * @interface AccountApiAccountActivateProductPostRequest
 */
export interface AccountApiAccountActivateProductPostRequest {
    /**
     * 
     * @type {}
     * @memberof AccountApiAccountActivateProductPost
     */
    readonly xPortalToken?: string

    /**
     * 
     * @type {AccountActivateProductPostRequest}
     * @memberof AccountApiAccountActivateProductPost
     */
    readonly accountActivateProductPostRequest?: AccountActivateProductPostRequest
}

/**
 * Request parameters for accountCreateProfilePost operation in AccountApi.
 * @export
 * @interface AccountApiAccountCreateProfilePostRequest
 */
export interface AccountApiAccountCreateProfilePostRequest {
    /**
     * 
     * @type {}
     * @memberof AccountApiAccountCreateProfilePost
     */
    readonly xPortalToken?: string

    /**
     * 
     * @type {AccountCreateProfilePostRequest}
     * @memberof AccountApiAccountCreateProfilePost
     */
    readonly accountCreateProfilePostRequest?: AccountCreateProfilePostRequest
}

/**
 * Request parameters for accountGetAllGet operation in AccountApi.
 * @export
 * @interface AccountApiAccountGetAllGetRequest
 */
export interface AccountApiAccountGetAllGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountGetAllGet
     */
    readonly refId?: string

    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountGetAllGet
     */
    readonly refType?: string

    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountGetAllGet
     */
    readonly accountNo?: string

    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountGetAllGet
     */
    readonly accountType?: string

    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountGetAllGet
     */
    readonly corporateId?: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiAccountGetAllGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiAccountGetAllGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountGetAllGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountGetAllGet
     */
    readonly sortDirection?: string

    /**
     * 
     * @type {}
     * @memberof AccountApiAccountGetAllGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for accountGetRefIdAccountNoGet operation in AccountApi.
 * @export
 * @interface AccountApiAccountGetRefIdAccountNoGetRequest
 */
export interface AccountApiAccountGetRefIdAccountNoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountGetRefIdAccountNoGet
     */
    readonly accountNo: string

    /**
     * 
     * @type {}
     * @memberof AccountApiAccountGetRefIdAccountNoGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for accountHistoriesGet operation in AccountApi.
 * @export
 * @interface AccountApiAccountHistoriesGetRequest
 */
export interface AccountApiAccountHistoriesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountHistoriesGet
     */
    readonly refId?: string

    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountHistoriesGet
     */
    readonly refType?: string

    /**
     * 
     * @type {number}
     * @memberof AccountApiAccountHistoriesGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof AccountApiAccountHistoriesGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountHistoriesGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof AccountApiAccountHistoriesGet
     */
    readonly sortDirection?: string

    /**
     * 
     * @type {}
     * @memberof AccountApiAccountHistoriesGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for accountReserveAccountNoPost operation in AccountApi.
 * @export
 * @interface AccountApiAccountReserveAccountNoPostRequest
 */
export interface AccountApiAccountReserveAccountNoPostRequest {
    /**
     * 
     * @type {}
     * @memberof AccountApiAccountReserveAccountNoPost
     */
    readonly xPortalToken?: string

    /**
     * 
     * @type {AccountReserveAccountNoPostRequest}
     * @memberof AccountApiAccountReserveAccountNoPost
     */
    readonly accountReserveAccountNoPostRequest?: AccountReserveAccountNoPostRequest
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {AccountApiAccountAccountsByCustomerCorporateIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountAccountsByCustomerCorporateIdGet(requestParameters: AccountApiAccountAccountsByCustomerCorporateIdGetRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountAccountsByCustomerCorporateIdGet(requestParameters.corporateId, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiAccountAccountsByRefIdReferenceIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountAccountsByRefIdReferenceIdGet(requestParameters: AccountApiAccountAccountsByRefIdReferenceIdGetRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountAccountsByRefIdReferenceIdGet(requestParameters.referenceId, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiAccountActivateProductPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountActivateProductPost(requestParameters: AccountApiAccountActivateProductPostRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountActivateProductPost(requestParameters.xPortalToken, requestParameters.accountActivateProductPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiAccountCreateProfilePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountCreateProfilePost(requestParameters: AccountApiAccountCreateProfilePostRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountCreateProfilePost(requestParameters.xPortalToken, requestParameters.accountCreateProfilePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiAccountGetAllGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountGetAllGet(requestParameters: AccountApiAccountGetAllGetRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountGetAllGet(requestParameters.refId, requestParameters.refType, requestParameters.accountNo, requestParameters.accountType, requestParameters.corporateId, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiAccountGetRefIdAccountNoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountGetRefIdAccountNoGet(requestParameters: AccountApiAccountGetRefIdAccountNoGetRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountGetRefIdAccountNoGet(requestParameters.accountNo, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiAccountHistoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountHistoriesGet(requestParameters: AccountApiAccountHistoriesGetRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountHistoriesGet(requestParameters.refId, requestParameters.refType, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountApiAccountReserveAccountNoPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountReserveAccountNoPost(requestParameters: AccountApiAccountReserveAccountNoPostRequest = {}, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountReserveAccountNoPost(requestParameters.xPortalToken, requestParameters.accountReserveAccountNoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
