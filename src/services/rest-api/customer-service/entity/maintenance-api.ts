/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.267
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountOfficerSPDataResponse } from '../model';
// @ts-ignore
import { AccountOfficerSPListDataResponse } from '../model';
// @ts-ignore
import { MaintenanceAccountOfficerPutRequest } from '../model';
/**
 * MaintenanceApi - axios parameter creator
 * @export
 */
export const MaintenanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [xPortalToken] 
         * @param {MaintenanceAccountOfficerPutRequest} [maintenanceAccountOfficerPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maintenanceAccountOfficerDelete: async (xPortalToken?: string, maintenanceAccountOfficerPutRequest?: MaintenanceAccountOfficerPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/maintenance/AccountOfficer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(maintenanceAccountOfficerPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} employeeID 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maintenanceAccountOfficerEmployeeIDGet: async (employeeID: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeID' is not null or undefined
            assertParamExists('maintenanceAccountOfficerEmployeeIDGet', 'employeeID', employeeID)
            const localVarPath = `/maintenance/AccountOfficer/{EmployeeID}`
                .replace(`{${"EmployeeID"}}`, encodeURIComponent(String(employeeID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [empCode] 
         * @param {string} [role] 
         * @param {string} [employeeID] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maintenanceAccountOfficerGet: async (empCode?: string, role?: string, employeeID?: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/maintenance/AccountOfficer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (empCode !== undefined) {
                localVarQueryParameter['EmpCode'] = empCode;
            }

            if (role !== undefined) {
                localVarQueryParameter['Role'] = role;
            }

            if (employeeID !== undefined) {
                localVarQueryParameter['EmployeeID'] = employeeID;
            }

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [xPortalToken] 
         * @param {MaintenanceAccountOfficerPutRequest} [maintenanceAccountOfficerPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maintenanceAccountOfficerPost: async (xPortalToken?: string, maintenanceAccountOfficerPutRequest?: MaintenanceAccountOfficerPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/maintenance/AccountOfficer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(maintenanceAccountOfficerPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [xPortalToken] 
         * @param {MaintenanceAccountOfficerPutRequest} [maintenanceAccountOfficerPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maintenanceAccountOfficerPut: async (xPortalToken?: string, maintenanceAccountOfficerPutRequest?: MaintenanceAccountOfficerPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/maintenance/AccountOfficer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(maintenanceAccountOfficerPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} employeeID 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maintenanceEmployeeInformationEmployeeIDGet: async (employeeID: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeID' is not null or undefined
            assertParamExists('maintenanceEmployeeInformationEmployeeIDGet', 'employeeID', employeeID)
            const localVarPath = `/maintenance/EmployeeInformation/{EmployeeID}`
                .replace(`{${"EmployeeID"}}`, encodeURIComponent(String(employeeID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MaintenanceApi - functional programming interface
 * @export
 */
export const MaintenanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MaintenanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [xPortalToken] 
         * @param {MaintenanceAccountOfficerPutRequest} [maintenanceAccountOfficerPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async maintenanceAccountOfficerDelete(xPortalToken?: string, maintenanceAccountOfficerPutRequest?: MaintenanceAccountOfficerPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountOfficerSPDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.maintenanceAccountOfficerDelete(xPortalToken, maintenanceAccountOfficerPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} employeeID 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async maintenanceAccountOfficerEmployeeIDGet(employeeID: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountOfficerSPDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.maintenanceAccountOfficerEmployeeIDGet(employeeID, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [empCode] 
         * @param {string} [role] 
         * @param {string} [employeeID] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async maintenanceAccountOfficerGet(empCode?: string, role?: string, employeeID?: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountOfficerSPListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.maintenanceAccountOfficerGet(empCode, role, employeeID, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [xPortalToken] 
         * @param {MaintenanceAccountOfficerPutRequest} [maintenanceAccountOfficerPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async maintenanceAccountOfficerPost(xPortalToken?: string, maintenanceAccountOfficerPutRequest?: MaintenanceAccountOfficerPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountOfficerSPDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.maintenanceAccountOfficerPost(xPortalToken, maintenanceAccountOfficerPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [xPortalToken] 
         * @param {MaintenanceAccountOfficerPutRequest} [maintenanceAccountOfficerPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async maintenanceAccountOfficerPut(xPortalToken?: string, maintenanceAccountOfficerPutRequest?: MaintenanceAccountOfficerPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountOfficerSPDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.maintenanceAccountOfficerPut(xPortalToken, maintenanceAccountOfficerPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} employeeID 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async maintenanceEmployeeInformationEmployeeIDGet(employeeID: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountOfficerSPDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.maintenanceEmployeeInformationEmployeeIDGet(employeeID, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MaintenanceApi - factory interface
 * @export
 */
export const MaintenanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MaintenanceApiFp(configuration)
    return {
        /**
         * 
         * @param {MaintenanceApiMaintenanceAccountOfficerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maintenanceAccountOfficerDelete(requestParameters: MaintenanceApiMaintenanceAccountOfficerDeleteRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccountOfficerSPDataResponse> {
            return localVarFp.maintenanceAccountOfficerDelete(requestParameters.xPortalToken, requestParameters.maintenanceAccountOfficerPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MaintenanceApiMaintenanceAccountOfficerEmployeeIDGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maintenanceAccountOfficerEmployeeIDGet(requestParameters: MaintenanceApiMaintenanceAccountOfficerEmployeeIDGetRequest, options?: AxiosRequestConfig): AxiosPromise<AccountOfficerSPDataResponse> {
            return localVarFp.maintenanceAccountOfficerEmployeeIDGet(requestParameters.employeeID, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MaintenanceApiMaintenanceAccountOfficerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maintenanceAccountOfficerGet(requestParameters: MaintenanceApiMaintenanceAccountOfficerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccountOfficerSPListDataResponse> {
            return localVarFp.maintenanceAccountOfficerGet(requestParameters.empCode, requestParameters.role, requestParameters.employeeID, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MaintenanceApiMaintenanceAccountOfficerPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maintenanceAccountOfficerPost(requestParameters: MaintenanceApiMaintenanceAccountOfficerPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccountOfficerSPDataResponse> {
            return localVarFp.maintenanceAccountOfficerPost(requestParameters.xPortalToken, requestParameters.maintenanceAccountOfficerPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MaintenanceApiMaintenanceAccountOfficerPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maintenanceAccountOfficerPut(requestParameters: MaintenanceApiMaintenanceAccountOfficerPutRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccountOfficerSPDataResponse> {
            return localVarFp.maintenanceAccountOfficerPut(requestParameters.xPortalToken, requestParameters.maintenanceAccountOfficerPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MaintenanceApiMaintenanceEmployeeInformationEmployeeIDGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        maintenanceEmployeeInformationEmployeeIDGet(requestParameters: MaintenanceApiMaintenanceEmployeeInformationEmployeeIDGetRequest, options?: AxiosRequestConfig): AxiosPromise<AccountOfficerSPDataResponse> {
            return localVarFp.maintenanceEmployeeInformationEmployeeIDGet(requestParameters.employeeID, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for maintenanceAccountOfficerDelete operation in MaintenanceApi.
 * @export
 * @interface MaintenanceApiMaintenanceAccountOfficerDeleteRequest
 */
export interface MaintenanceApiMaintenanceAccountOfficerDeleteRequest {
    /**
     * 
     * @type {}
     * @memberof MaintenanceApiMaintenanceAccountOfficerDelete
     */
    readonly xPortalToken?: string

    /**
     * 
     * @type {MaintenanceAccountOfficerPutRequest}
     * @memberof MaintenanceApiMaintenanceAccountOfficerDelete
     */
    readonly maintenanceAccountOfficerPutRequest?: MaintenanceAccountOfficerPutRequest
}

/**
 * Request parameters for maintenanceAccountOfficerEmployeeIDGet operation in MaintenanceApi.
 * @export
 * @interface MaintenanceApiMaintenanceAccountOfficerEmployeeIDGetRequest
 */
export interface MaintenanceApiMaintenanceAccountOfficerEmployeeIDGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MaintenanceApiMaintenanceAccountOfficerEmployeeIDGet
     */
    readonly employeeID: string

    /**
     * 
     * @type {}
     * @memberof MaintenanceApiMaintenanceAccountOfficerEmployeeIDGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for maintenanceAccountOfficerGet operation in MaintenanceApi.
 * @export
 * @interface MaintenanceApiMaintenanceAccountOfficerGetRequest
 */
export interface MaintenanceApiMaintenanceAccountOfficerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MaintenanceApiMaintenanceAccountOfficerGet
     */
    readonly empCode?: string

    /**
     * 
     * @type {string}
     * @memberof MaintenanceApiMaintenanceAccountOfficerGet
     */
    readonly role?: string

    /**
     * 
     * @type {string}
     * @memberof MaintenanceApiMaintenanceAccountOfficerGet
     */
    readonly employeeID?: string

    /**
     * 
     * @type {}
     * @memberof MaintenanceApiMaintenanceAccountOfficerGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for maintenanceAccountOfficerPost operation in MaintenanceApi.
 * @export
 * @interface MaintenanceApiMaintenanceAccountOfficerPostRequest
 */
export interface MaintenanceApiMaintenanceAccountOfficerPostRequest {
    /**
     * 
     * @type {}
     * @memberof MaintenanceApiMaintenanceAccountOfficerPost
     */
    readonly xPortalToken?: string

    /**
     * 
     * @type {MaintenanceAccountOfficerPutRequest}
     * @memberof MaintenanceApiMaintenanceAccountOfficerPost
     */
    readonly maintenanceAccountOfficerPutRequest?: MaintenanceAccountOfficerPutRequest
}

/**
 * Request parameters for maintenanceAccountOfficerPut operation in MaintenanceApi.
 * @export
 * @interface MaintenanceApiMaintenanceAccountOfficerPutRequest
 */
export interface MaintenanceApiMaintenanceAccountOfficerPutRequest {
    /**
     * 
     * @type {}
     * @memberof MaintenanceApiMaintenanceAccountOfficerPut
     */
    readonly xPortalToken?: string

    /**
     * 
     * @type {MaintenanceAccountOfficerPutRequest}
     * @memberof MaintenanceApiMaintenanceAccountOfficerPut
     */
    readonly maintenanceAccountOfficerPutRequest?: MaintenanceAccountOfficerPutRequest
}

/**
 * Request parameters for maintenanceEmployeeInformationEmployeeIDGet operation in MaintenanceApi.
 * @export
 * @interface MaintenanceApiMaintenanceEmployeeInformationEmployeeIDGetRequest
 */
export interface MaintenanceApiMaintenanceEmployeeInformationEmployeeIDGetRequest {
    /**
     * 
     * @type {string}
     * @memberof MaintenanceApiMaintenanceEmployeeInformationEmployeeIDGet
     */
    readonly employeeID: string

    /**
     * 
     * @type {}
     * @memberof MaintenanceApiMaintenanceEmployeeInformationEmployeeIDGet
     */
    readonly xPortalToken?: string
}

/**
 * MaintenanceApi - object-oriented interface
 * @export
 * @class MaintenanceApi
 * @extends {BaseAPI}
 */
export class MaintenanceApi extends BaseAPI {
    /**
     * 
     * @param {MaintenanceApiMaintenanceAccountOfficerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaintenanceApi
     */
    public maintenanceAccountOfficerDelete(requestParameters: MaintenanceApiMaintenanceAccountOfficerDeleteRequest = {}, options?: AxiosRequestConfig) {
        return MaintenanceApiFp(this.configuration).maintenanceAccountOfficerDelete(requestParameters.xPortalToken, requestParameters.maintenanceAccountOfficerPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MaintenanceApiMaintenanceAccountOfficerEmployeeIDGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaintenanceApi
     */
    public maintenanceAccountOfficerEmployeeIDGet(requestParameters: MaintenanceApiMaintenanceAccountOfficerEmployeeIDGetRequest, options?: AxiosRequestConfig) {
        return MaintenanceApiFp(this.configuration).maintenanceAccountOfficerEmployeeIDGet(requestParameters.employeeID, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MaintenanceApiMaintenanceAccountOfficerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaintenanceApi
     */
    public maintenanceAccountOfficerGet(requestParameters: MaintenanceApiMaintenanceAccountOfficerGetRequest = {}, options?: AxiosRequestConfig) {
        return MaintenanceApiFp(this.configuration).maintenanceAccountOfficerGet(requestParameters.empCode, requestParameters.role, requestParameters.employeeID, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MaintenanceApiMaintenanceAccountOfficerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaintenanceApi
     */
    public maintenanceAccountOfficerPost(requestParameters: MaintenanceApiMaintenanceAccountOfficerPostRequest = {}, options?: AxiosRequestConfig) {
        return MaintenanceApiFp(this.configuration).maintenanceAccountOfficerPost(requestParameters.xPortalToken, requestParameters.maintenanceAccountOfficerPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MaintenanceApiMaintenanceAccountOfficerPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaintenanceApi
     */
    public maintenanceAccountOfficerPut(requestParameters: MaintenanceApiMaintenanceAccountOfficerPutRequest = {}, options?: AxiosRequestConfig) {
        return MaintenanceApiFp(this.configuration).maintenanceAccountOfficerPut(requestParameters.xPortalToken, requestParameters.maintenanceAccountOfficerPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MaintenanceApiMaintenanceEmployeeInformationEmployeeIDGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaintenanceApi
     */
    public maintenanceEmployeeInformationEmployeeIDGet(requestParameters: MaintenanceApiMaintenanceEmployeeInformationEmployeeIDGetRequest, options?: AxiosRequestConfig) {
        return MaintenanceApiFp(this.configuration).maintenanceEmployeeInformationEmployeeIDGet(requestParameters.employeeID, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }
}
