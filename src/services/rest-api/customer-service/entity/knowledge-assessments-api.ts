/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.267
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnswerInput } from '../model';
// @ts-ignore
import { AnswerListDataResponse } from '../model';
// @ts-ignore
import { QuestionsOutputDataResponse } from '../model';
/**
 * KnowledgeAssessmentsApi - axios parameter creator
 * @export
 */
export const KnowledgeAssessmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves answers for a knowledge assessment or suitability test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        knowledgeAssessmentsAnswersCorparateIdGet: async (corparateId: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corparateId' is not null or undefined
            assertParamExists('knowledgeAssessmentsAnswersCorparateIdGet', 'corparateId', corparateId)
            const localVarPath = `/KnowledgeAssessments/Answers/{corparateId}`
                .replace(`{${"corparateId"}}`, encodeURIComponent(String(corparateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves questions for a knowledge assessment or suitability test.
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        knowledgeAssessmentsQuestionsGet: async (xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/KnowledgeAssessments/Questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves answers for a knowledge assessment or suitability test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {string} [xPortalToken] 
         * @param {Array<AnswerInput>} [answerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        knowledgeAssessmentsSaveCorparateIdPost: async (corparateId: string, xPortalToken?: string, answerInput?: Array<AnswerInput>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corparateId' is not null or undefined
            assertParamExists('knowledgeAssessmentsSaveCorparateIdPost', 'corparateId', corparateId)
            const localVarPath = `/KnowledgeAssessments/Save/{corparateId}`
                .replace(`{${"corparateId"}}`, encodeURIComponent(String(corparateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(answerInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KnowledgeAssessmentsApi - functional programming interface
 * @export
 */
export const KnowledgeAssessmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KnowledgeAssessmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves answers for a knowledge assessment or suitability test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async knowledgeAssessmentsAnswersCorparateIdGet(corparateId: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.knowledgeAssessmentsAnswersCorparateIdGet(corparateId, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves questions for a knowledge assessment or suitability test.
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async knowledgeAssessmentsQuestionsGet(xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionsOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.knowledgeAssessmentsQuestionsGet(xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Saves answers for a knowledge assessment or suitability test based on a specific flow ID.
         * @param {string} corparateId 
         * @param {string} [xPortalToken] 
         * @param {Array<AnswerInput>} [answerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async knowledgeAssessmentsSaveCorparateIdPost(corparateId: string, xPortalToken?: string, answerInput?: Array<AnswerInput>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.knowledgeAssessmentsSaveCorparateIdPost(corparateId, xPortalToken, answerInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KnowledgeAssessmentsApi - factory interface
 * @export
 */
export const KnowledgeAssessmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KnowledgeAssessmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves answers for a knowledge assessment or suitability test based on a specific flow ID.
         * @param {KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersCorparateIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        knowledgeAssessmentsAnswersCorparateIdGet(requestParameters: KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersCorparateIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<AnswerListDataResponse> {
            return localVarFp.knowledgeAssessmentsAnswersCorparateIdGet(requestParameters.corparateId, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves questions for a knowledge assessment or suitability test.
         * @param {KnowledgeAssessmentsApiKnowledgeAssessmentsQuestionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        knowledgeAssessmentsQuestionsGet(requestParameters: KnowledgeAssessmentsApiKnowledgeAssessmentsQuestionsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<QuestionsOutputDataResponse> {
            return localVarFp.knowledgeAssessmentsQuestionsGet(requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Saves answers for a knowledge assessment or suitability test based on a specific flow ID.
         * @param {KnowledgeAssessmentsApiKnowledgeAssessmentsSaveCorparateIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        knowledgeAssessmentsSaveCorparateIdPost(requestParameters: KnowledgeAssessmentsApiKnowledgeAssessmentsSaveCorparateIdPostRequest, options?: AxiosRequestConfig): AxiosPromise<AnswerListDataResponse> {
            return localVarFp.knowledgeAssessmentsSaveCorparateIdPost(requestParameters.corparateId, requestParameters.xPortalToken, requestParameters.answerInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for knowledgeAssessmentsAnswersCorparateIdGet operation in KnowledgeAssessmentsApi.
 * @export
 * @interface KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersCorparateIdGetRequest
 */
export interface KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersCorparateIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersCorparateIdGet
     */
    readonly corparateId: string

    /**
     * 
     * @type {}
     * @memberof KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersCorparateIdGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for knowledgeAssessmentsQuestionsGet operation in KnowledgeAssessmentsApi.
 * @export
 * @interface KnowledgeAssessmentsApiKnowledgeAssessmentsQuestionsGetRequest
 */
export interface KnowledgeAssessmentsApiKnowledgeAssessmentsQuestionsGetRequest {
    /**
     * 
     * @type {}
     * @memberof KnowledgeAssessmentsApiKnowledgeAssessmentsQuestionsGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for knowledgeAssessmentsSaveCorparateIdPost operation in KnowledgeAssessmentsApi.
 * @export
 * @interface KnowledgeAssessmentsApiKnowledgeAssessmentsSaveCorparateIdPostRequest
 */
export interface KnowledgeAssessmentsApiKnowledgeAssessmentsSaveCorparateIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof KnowledgeAssessmentsApiKnowledgeAssessmentsSaveCorparateIdPost
     */
    readonly corparateId: string

    /**
     * 
     * @type {}
     * @memberof KnowledgeAssessmentsApiKnowledgeAssessmentsSaveCorparateIdPost
     */
    readonly xPortalToken?: string

    /**
     * 
     * @type {Array<AnswerInput>}
     * @memberof KnowledgeAssessmentsApiKnowledgeAssessmentsSaveCorparateIdPost
     */
    readonly answerInput?: Array<AnswerInput>
}

/**
 * KnowledgeAssessmentsApi - object-oriented interface
 * @export
 * @class KnowledgeAssessmentsApi
 * @extends {BaseAPI}
 */
export class KnowledgeAssessmentsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves answers for a knowledge assessment or suitability test based on a specific flow ID.
     * @param {KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersCorparateIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeAssessmentsApi
     */
    public knowledgeAssessmentsAnswersCorparateIdGet(requestParameters: KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersCorparateIdGetRequest, options?: AxiosRequestConfig) {
        return KnowledgeAssessmentsApiFp(this.configuration).knowledgeAssessmentsAnswersCorparateIdGet(requestParameters.corparateId, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves questions for a knowledge assessment or suitability test.
     * @param {KnowledgeAssessmentsApiKnowledgeAssessmentsQuestionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeAssessmentsApi
     */
    public knowledgeAssessmentsQuestionsGet(requestParameters: KnowledgeAssessmentsApiKnowledgeAssessmentsQuestionsGetRequest = {}, options?: AxiosRequestConfig) {
        return KnowledgeAssessmentsApiFp(this.configuration).knowledgeAssessmentsQuestionsGet(requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Saves answers for a knowledge assessment or suitability test based on a specific flow ID.
     * @param {KnowledgeAssessmentsApiKnowledgeAssessmentsSaveCorparateIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeAssessmentsApi
     */
    public knowledgeAssessmentsSaveCorparateIdPost(requestParameters: KnowledgeAssessmentsApiKnowledgeAssessmentsSaveCorparateIdPostRequest, options?: AxiosRequestConfig) {
        return KnowledgeAssessmentsApiFp(this.configuration).knowledgeAssessmentsSaveCorparateIdPost(requestParameters.corparateId, requestParameters.xPortalToken, requestParameters.answerInput, options).then((request) => request(this.axios, this.basePath));
    }
}
