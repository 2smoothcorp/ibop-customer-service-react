/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.267
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { VerifyRequestVerifyRequestOutputPagination } from '../model';
/**
 * VerificationApi - axios parameter creator
 * @export
 */
export const VerificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Endpoint to retrieve all customer verification requests.
         * @param {string} [corparateId] 
         * @param {string} [name] Gets or sets the name associated with the query.
         * @param {string} [refId] Gets or sets the reference identifier associated with the query.
         * @param {boolean} [getByRefId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {Array<string>} [status] 
         * @param {boolean} [isEmailSms] 
         * @param {Array<string>} [channel] 
         * @param {Array<string>} [customerType] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationGetAllGet: async (corparateId?: string, name?: string, refId?: string, getByRefId?: boolean, startDate?: string, endDate?: string, status?: Array<string>, isEmailSms?: boolean, channel?: Array<string>, customerType?: Array<string>, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Verification/GetAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corparateId !== undefined) {
                localVarQueryParameter['CorparateId'] = corparateId;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (refId !== undefined) {
                localVarQueryParameter['RefId'] = refId;
            }

            if (getByRefId !== undefined) {
                localVarQueryParameter['GetByRefId'] = getByRefId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (status) {
                localVarQueryParameter['Status'] = status;
            }

            if (isEmailSms !== undefined) {
                localVarQueryParameter['IsEmailSms'] = isEmailSms;
            }

            if (channel) {
                localVarQueryParameter['Channel'] = channel;
            }

            if (customerType) {
                localVarQueryParameter['CustomerType'] = customerType;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationApi - functional programming interface
 * @export
 */
export const VerificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Endpoint to retrieve all customer verification requests.
         * @param {string} [corparateId] 
         * @param {string} [name] Gets or sets the name associated with the query.
         * @param {string} [refId] Gets or sets the reference identifier associated with the query.
         * @param {boolean} [getByRefId] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {Array<string>} [status] 
         * @param {boolean} [isEmailSms] 
         * @param {Array<string>} [channel] 
         * @param {Array<string>} [customerType] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verificationGetAllGet(corparateId?: string, name?: string, refId?: string, getByRefId?: boolean, startDate?: string, endDate?: string, status?: Array<string>, isEmailSms?: boolean, channel?: Array<string>, customerType?: Array<string>, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyRequestVerifyRequestOutputPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verificationGetAllGet(corparateId, name, refId, getByRefId, startDate, endDate, status, isEmailSms, channel, customerType, pageIndex, pageSize, sortField, sortDirection, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerificationApi - factory interface
 * @export
 */
export const VerificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerificationApiFp(configuration)
    return {
        /**
         * 
         * @summary Endpoint to retrieve all customer verification requests.
         * @param {VerificationApiVerificationGetAllGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationGetAllGet(requestParameters: VerificationApiVerificationGetAllGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<VerifyRequestVerifyRequestOutputPagination> {
            return localVarFp.verificationGetAllGet(requestParameters.corparateId, requestParameters.name, requestParameters.refId, requestParameters.getByRefId, requestParameters.startDate, requestParameters.endDate, requestParameters.status, requestParameters.isEmailSms, requestParameters.channel, requestParameters.customerType, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for verificationGetAllGet operation in VerificationApi.
 * @export
 * @interface VerificationApiVerificationGetAllGetRequest
 */
export interface VerificationApiVerificationGetAllGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly corparateId?: string

    /**
     * Gets or sets the name associated with the query.
     * @type {string}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly name?: string

    /**
     * Gets or sets the reference identifier associated with the query.
     * @type {string}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly refId?: string

    /**
     * 
     * @type {boolean}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly getByRefId?: boolean

    /**
     * 
     * @type {string}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly startDate?: string

    /**
     * 
     * @type {string}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly endDate?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly status?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly isEmailSms?: boolean

    /**
     * 
     * @type {Array<string>}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly channel?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly customerType?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly sortDirection?: string

    /**
     * 
     * @type {}
     * @memberof VerificationApiVerificationGetAllGet
     */
    readonly xPortalToken?: string
}

/**
 * VerificationApi - object-oriented interface
 * @export
 * @class VerificationApi
 * @extends {BaseAPI}
 */
export class VerificationApi extends BaseAPI {
    /**
     * 
     * @summary Endpoint to retrieve all customer verification requests.
     * @param {VerificationApiVerificationGetAllGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public verificationGetAllGet(requestParameters: VerificationApiVerificationGetAllGetRequest = {}, options?: AxiosRequestConfig) {
        return VerificationApiFp(this.configuration).verificationGetAllGet(requestParameters.corparateId, requestParameters.name, requestParameters.refId, requestParameters.getByRefId, requestParameters.startDate, requestParameters.endDate, requestParameters.status, requestParameters.isEmailSms, requestParameters.channel, requestParameters.customerType, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }
}
