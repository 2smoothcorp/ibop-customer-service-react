/* tslint:disable */
/* eslint-disable */
/**
 * Customer Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.242
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdvisorInfoResponseDataResponse } from '../model';
// @ts-ignore
import { BaseResponse } from '../model';
// @ts-ignore
import { CustomerInfoListResponsePagination } from '../model';
// @ts-ignore
import { CustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest } from '../model';
// @ts-ignore
import { EmergencyContactInfoResponseDataResponse } from '../model';
// @ts-ignore
import { MenuResponseListDataResponse } from '../model';
// @ts-ignore
import { PersonalInfoResponseDataResponse } from '../model';
// @ts-ignore
import { SpouseInfoResponseDataResponse } from '../model';
/**
 * CustomerProfileV2Api - axios parameter creator
 * @export
 */
export const CustomerProfileV2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Customer Information List v2
         * @param {string} [corporateID] 
         * @param {string} [referenceID] 
         * @param {string} [fullName] 
         * @param {string} [emailNumber] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInfoListGet: async (corporateID?: string, referenceID?: string, fullName?: string, emailNumber?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/CustomerInfoList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateID !== undefined) {
                localVarQueryParameter['CorporateID'] = corporateID;
            }

            if (referenceID !== undefined) {
                localVarQueryParameter['ReferenceID'] = referenceID;
            }

            if (fullName !== undefined) {
                localVarQueryParameter['FullName'] = fullName;
            }

            if (emailNumber !== undefined) {
                localVarQueryParameter['EmailNumber'] = emailNumber;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CustomerInformation Menu
         * @param {string} [corporateId] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInfoMenuGet: async (corporateId?: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/CustomerInfoMenu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateId !== undefined) {
                localVarQueryParameter['corporateId'] = corporateId;
            }

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get AdvisorInfo
         * @param {string} [corporateId] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInformationAdvisorInfoGet: async (corporateId?: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/CustomerInformation/AdvisorInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateId !== undefined) {
                localVarQueryParameter['corporateId'] = corporateId;
            }

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get EmergencyContactInfo
         * @param {string} [corporateId] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInformationEmergencyContactInfoGet: async (corporateId?: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/CustomerInformation/EmergencyContactInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateId !== undefined) {
                localVarQueryParameter['corporateId'] = corporateId;
            }

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update CustomerInformation PersonalInfo
         * @param {string} corporateId 
         * @param {string} [xPortalToken] 
         * @param {CustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest} [customerProfileCustomerInformationPersonalInfoCorporateIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInformationPersonalInfoCorporateIdPut: async (corporateId: string, xPortalToken?: string, customerProfileCustomerInformationPersonalInfoCorporateIdPutRequest?: CustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'corporateId' is not null or undefined
            assertParamExists('customerProfileCustomerInformationPersonalInfoCorporateIdPut', 'corporateId', corporateId)
            const localVarPath = `/customer-profile/CustomerInformation/PersonalInfo/{corporateId}`
                .replace(`{${"corporateId"}}`, encodeURIComponent(String(corporateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerProfileCustomerInformationPersonalInfoCorporateIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get PersonalInfo
         * @param {string} [corporateId] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInformationPersonalInfoGet: async (corporateId?: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/CustomerInformation/PersonalInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateId !== undefined) {
                localVarQueryParameter['corporateId'] = corporateId;
            }

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get SpouseInfo
         * @param {string} [corporateId] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInformationSpouseInfoGet: async (corporateId?: string, xPortalToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer-profile/CustomerInformation/SpouseInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (corporateId !== undefined) {
                localVarQueryParameter['corporateId'] = corporateId;
            }

            if (xPortalToken != null) {
                localVarHeaderParameter['x-portal-token'] = typeof xPortalToken === 'string' 
                    ? xPortalToken 
                    : JSON.stringify(xPortalToken);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerProfileV2Api - functional programming interface
 * @export
 */
export const CustomerProfileV2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerProfileV2ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Customer Information List v2
         * @param {string} [corporateID] 
         * @param {string} [referenceID] 
         * @param {string} [fullName] 
         * @param {string} [emailNumber] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileCustomerInfoListGet(corporateID?: string, referenceID?: string, fullName?: string, emailNumber?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerInfoListResponsePagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileCustomerInfoListGet(corporateID, referenceID, fullName, emailNumber, pageIndex, pageSize, sortField, sortDirection, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary CustomerInformation Menu
         * @param {string} [corporateId] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileCustomerInfoMenuGet(corporateId?: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuResponseListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileCustomerInfoMenuGet(corporateId, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get AdvisorInfo
         * @param {string} [corporateId] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileCustomerInformationAdvisorInfoGet(corporateId?: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdvisorInfoResponseDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileCustomerInformationAdvisorInfoGet(corporateId, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get EmergencyContactInfo
         * @param {string} [corporateId] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileCustomerInformationEmergencyContactInfoGet(corporateId?: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmergencyContactInfoResponseDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileCustomerInformationEmergencyContactInfoGet(corporateId, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update CustomerInformation PersonalInfo
         * @param {string} corporateId 
         * @param {string} [xPortalToken] 
         * @param {CustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest} [customerProfileCustomerInformationPersonalInfoCorporateIdPutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileCustomerInformationPersonalInfoCorporateIdPut(corporateId: string, xPortalToken?: string, customerProfileCustomerInformationPersonalInfoCorporateIdPutRequest?: CustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileCustomerInformationPersonalInfoCorporateIdPut(corporateId, xPortalToken, customerProfileCustomerInformationPersonalInfoCorporateIdPutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get PersonalInfo
         * @param {string} [corporateId] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileCustomerInformationPersonalInfoGet(corporateId?: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalInfoResponseDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileCustomerInformationPersonalInfoGet(corporateId, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get SpouseInfo
         * @param {string} [corporateId] 
         * @param {string} [xPortalToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerProfileCustomerInformationSpouseInfoGet(corporateId?: string, xPortalToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpouseInfoResponseDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerProfileCustomerInformationSpouseInfoGet(corporateId, xPortalToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerProfileV2Api - factory interface
 * @export
 */
export const CustomerProfileV2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerProfileV2ApiFp(configuration)
    return {
        /**
         * 
         * @summary Customer Information List v2
         * @param {CustomerProfileV2ApiCustomerProfileCustomerInfoListGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInfoListGet(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInfoListGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CustomerInfoListResponsePagination> {
            return localVarFp.customerProfileCustomerInfoListGet(requestParameters.corporateID, requestParameters.referenceID, requestParameters.fullName, requestParameters.emailNumber, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CustomerInformation Menu
         * @param {CustomerProfileV2ApiCustomerProfileCustomerInfoMenuGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInfoMenuGet(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInfoMenuGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MenuResponseListDataResponse> {
            return localVarFp.customerProfileCustomerInfoMenuGet(requestParameters.corporateId, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get AdvisorInfo
         * @param {CustomerProfileV2ApiCustomerProfileCustomerInformationAdvisorInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInformationAdvisorInfoGet(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInformationAdvisorInfoGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AdvisorInfoResponseDataResponse> {
            return localVarFp.customerProfileCustomerInformationAdvisorInfoGet(requestParameters.corporateId, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get EmergencyContactInfo
         * @param {CustomerProfileV2ApiCustomerProfileCustomerInformationEmergencyContactInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInformationEmergencyContactInfoGet(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInformationEmergencyContactInfoGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<EmergencyContactInfoResponseDataResponse> {
            return localVarFp.customerProfileCustomerInformationEmergencyContactInfoGet(requestParameters.corporateId, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update CustomerInformation PersonalInfo
         * @param {CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInformationPersonalInfoCorporateIdPut(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest, options?: AxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.customerProfileCustomerInformationPersonalInfoCorporateIdPut(requestParameters.corporateId, requestParameters.xPortalToken, requestParameters.customerProfileCustomerInformationPersonalInfoCorporateIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get PersonalInfo
         * @param {CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInformationPersonalInfoGet(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PersonalInfoResponseDataResponse> {
            return localVarFp.customerProfileCustomerInformationPersonalInfoGet(requestParameters.corporateId, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get SpouseInfo
         * @param {CustomerProfileV2ApiCustomerProfileCustomerInformationSpouseInfoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerProfileCustomerInformationSpouseInfoGet(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInformationSpouseInfoGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SpouseInfoResponseDataResponse> {
            return localVarFp.customerProfileCustomerInformationSpouseInfoGet(requestParameters.corporateId, requestParameters.xPortalToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for customerProfileCustomerInfoListGet operation in CustomerProfileV2Api.
 * @export
 * @interface CustomerProfileV2ApiCustomerProfileCustomerInfoListGetRequest
 */
export interface CustomerProfileV2ApiCustomerProfileCustomerInfoListGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInfoListGet
     */
    readonly corporateID?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInfoListGet
     */
    readonly referenceID?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInfoListGet
     */
    readonly fullName?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInfoListGet
     */
    readonly emailNumber?: string

    /**
     * 
     * @type {number}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInfoListGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInfoListGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInfoListGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInfoListGet
     */
    readonly sortDirection?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInfoListGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for customerProfileCustomerInfoMenuGet operation in CustomerProfileV2Api.
 * @export
 * @interface CustomerProfileV2ApiCustomerProfileCustomerInfoMenuGetRequest
 */
export interface CustomerProfileV2ApiCustomerProfileCustomerInfoMenuGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInfoMenuGet
     */
    readonly corporateId?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInfoMenuGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for customerProfileCustomerInformationAdvisorInfoGet operation in CustomerProfileV2Api.
 * @export
 * @interface CustomerProfileV2ApiCustomerProfileCustomerInformationAdvisorInfoGetRequest
 */
export interface CustomerProfileV2ApiCustomerProfileCustomerInformationAdvisorInfoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInformationAdvisorInfoGet
     */
    readonly corporateId?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInformationAdvisorInfoGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for customerProfileCustomerInformationEmergencyContactInfoGet operation in CustomerProfileV2Api.
 * @export
 * @interface CustomerProfileV2ApiCustomerProfileCustomerInformationEmergencyContactInfoGetRequest
 */
export interface CustomerProfileV2ApiCustomerProfileCustomerInformationEmergencyContactInfoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInformationEmergencyContactInfoGet
     */
    readonly corporateId?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInformationEmergencyContactInfoGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for customerProfileCustomerInformationPersonalInfoCorporateIdPut operation in CustomerProfileV2Api.
 * @export
 * @interface CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest
 */
export interface CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoCorporateIdPut
     */
    readonly corporateId: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoCorporateIdPut
     */
    readonly xPortalToken?: string

    /**
     * 
     * @type {CustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoCorporateIdPut
     */
    readonly customerProfileCustomerInformationPersonalInfoCorporateIdPutRequest?: CustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest
}

/**
 * Request parameters for customerProfileCustomerInformationPersonalInfoGet operation in CustomerProfileV2Api.
 * @export
 * @interface CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoGetRequest
 */
export interface CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoGet
     */
    readonly corporateId?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoGet
     */
    readonly xPortalToken?: string
}

/**
 * Request parameters for customerProfileCustomerInformationSpouseInfoGet operation in CustomerProfileV2Api.
 * @export
 * @interface CustomerProfileV2ApiCustomerProfileCustomerInformationSpouseInfoGetRequest
 */
export interface CustomerProfileV2ApiCustomerProfileCustomerInformationSpouseInfoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInformationSpouseInfoGet
     */
    readonly corporateId?: string

    /**
     * 
     * @type {}
     * @memberof CustomerProfileV2ApiCustomerProfileCustomerInformationSpouseInfoGet
     */
    readonly xPortalToken?: string
}

/**
 * CustomerProfileV2Api - object-oriented interface
 * @export
 * @class CustomerProfileV2Api
 * @extends {BaseAPI}
 */
export class CustomerProfileV2Api extends BaseAPI {
    /**
     * 
     * @summary Customer Information List v2
     * @param {CustomerProfileV2ApiCustomerProfileCustomerInfoListGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileV2Api
     */
    public customerProfileCustomerInfoListGet(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInfoListGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileV2ApiFp(this.configuration).customerProfileCustomerInfoListGet(requestParameters.corporateID, requestParameters.referenceID, requestParameters.fullName, requestParameters.emailNumber, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CustomerInformation Menu
     * @param {CustomerProfileV2ApiCustomerProfileCustomerInfoMenuGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileV2Api
     */
    public customerProfileCustomerInfoMenuGet(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInfoMenuGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileV2ApiFp(this.configuration).customerProfileCustomerInfoMenuGet(requestParameters.corporateId, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get AdvisorInfo
     * @param {CustomerProfileV2ApiCustomerProfileCustomerInformationAdvisorInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileV2Api
     */
    public customerProfileCustomerInformationAdvisorInfoGet(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInformationAdvisorInfoGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileV2ApiFp(this.configuration).customerProfileCustomerInformationAdvisorInfoGet(requestParameters.corporateId, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get EmergencyContactInfo
     * @param {CustomerProfileV2ApiCustomerProfileCustomerInformationEmergencyContactInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileV2Api
     */
    public customerProfileCustomerInformationEmergencyContactInfoGet(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInformationEmergencyContactInfoGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileV2ApiFp(this.configuration).customerProfileCustomerInformationEmergencyContactInfoGet(requestParameters.corporateId, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update CustomerInformation PersonalInfo
     * @param {CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileV2Api
     */
    public customerProfileCustomerInformationPersonalInfoCorporateIdPut(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoCorporateIdPutRequest, options?: AxiosRequestConfig) {
        return CustomerProfileV2ApiFp(this.configuration).customerProfileCustomerInformationPersonalInfoCorporateIdPut(requestParameters.corporateId, requestParameters.xPortalToken, requestParameters.customerProfileCustomerInformationPersonalInfoCorporateIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get PersonalInfo
     * @param {CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileV2Api
     */
    public customerProfileCustomerInformationPersonalInfoGet(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInformationPersonalInfoGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileV2ApiFp(this.configuration).customerProfileCustomerInformationPersonalInfoGet(requestParameters.corporateId, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get SpouseInfo
     * @param {CustomerProfileV2ApiCustomerProfileCustomerInformationSpouseInfoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerProfileV2Api
     */
    public customerProfileCustomerInformationSpouseInfoGet(requestParameters: CustomerProfileV2ApiCustomerProfileCustomerInformationSpouseInfoGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerProfileV2ApiFp(this.configuration).customerProfileCustomerInformationSpouseInfoGet(requestParameters.corporateId, requestParameters.xPortalToken, options).then((request) => request(this.axios, this.basePath));
    }
}
