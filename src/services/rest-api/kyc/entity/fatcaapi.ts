/* tslint:disable */
/* eslint-disable */
/**
 * KYC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.93
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Answer } from '../model';
// @ts-ignore
import { AnswerFACTA } from '../model';
// @ts-ignore
import { AnswerInput } from '../model';
// @ts-ignore
import { CustomerW8ben } from '../model';
// @ts-ignore
import { CustomerW9america } from '../model';
// @ts-ignore
import { FatcaW8Input } from '../model';
// @ts-ignore
import { FatcaW9Input } from '../model';
// @ts-ignore
import { GetFatcaW8Output } from '../model';
// @ts-ignore
import { GetFatcaW9Output } from '../model';
// @ts-ignore
import { QuestionsOutput } from '../model';
// @ts-ignore
import { SaveTinInput } from '../model';
// @ts-ignore
import { TinInfoOutput } from '../model';
/**
 * FATCAApi - axios parameter creator
 * @export
 */
export const FATCAApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves questions for a FATCA test.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCAQuestionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/FATCA/Questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA test based on a specific flow ID.
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCARefTypeRefIdAnswersGet: async (refId: string, refType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('fATCARefTypeRefIdAnswersGet', 'refId', refId)
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('fATCARefTypeRefIdAnswersGet', 'refType', refType)
            const localVarPath = `/FATCA/{refType}/{refId}/Answers`
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)))
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Tins by Flow ID
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCARefTypeRefIdGetTinsGet: async (refId: string, refType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('fATCARefTypeRefIdGetTinsGet', 'refId', refId)
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('fATCARefTypeRefIdGetTinsGet', 'refType', refType)
            const localVarPath = `/FATCA/{refType}/{refId}/GetTins`
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)))
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves answers for a FATCA test based on a specific flow ID.
         * @param {string} refId 
         * @param {string} refType 
         * @param {Array<AnswerInput>} [answerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCARefTypeRefIdSavePost: async (refId: string, refType: string, answerInput?: Array<AnswerInput>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('fATCARefTypeRefIdSavePost', 'refId', refId)
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('fATCARefTypeRefIdSavePost', 'refType', refType)
            const localVarPath = `/FATCA/{refType}/{refId}/Save`
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)))
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(answerInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves Tins
         * @param {string} refId 
         * @param {string} refType 
         * @param {boolean} [isFatcaIndividualSelfCert] 
         * @param {Array<SaveTinInput>} [saveTinInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCARefTypeRefIdSaveTinsPost: async (refId: string, refType: string, isFatcaIndividualSelfCert?: boolean, saveTinInput?: Array<SaveTinInput>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('fATCARefTypeRefIdSaveTinsPost', 'refId', refId)
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('fATCARefTypeRefIdSaveTinsPost', 'refType', refType)
            const localVarPath = `/FATCA/{refType}/{refId}/SaveTins`
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)))
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (isFatcaIndividualSelfCert !== undefined) {
                localVarQueryParameter['isFatcaIndividualSelfCert'] = isFatcaIndividualSelfCert;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveTinInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA W8 test based on a specific flow ID.
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCARefTypeRefIdW8Get: async (refId: string, refType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('fATCARefTypeRefIdW8Get', 'refId', refId)
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('fATCARefTypeRefIdW8Get', 'refType', refType)
            const localVarPath = `/FATCA/{refType}/{refId}/W8`
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)))
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA W9 test based on a specific flow ID.
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCARefTypeRefIdW9Get: async (refId: string, refType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('fATCARefTypeRefIdW9Get', 'refId', refId)
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('fATCARefTypeRefIdW9Get', 'refType', refType)
            const localVarPath = `/FATCA/{refType}/{refId}/W9`
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)))
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves answers for a FATCA W8 test based on a specific flow ID.
         * @param {FatcaW8Input} [fatcaW8Input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCASaveW8Post: async (fatcaW8Input?: FatcaW8Input, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/FATCA/SaveW8`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fatcaW8Input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves answers for a FATCA W9 test based on a specific flow ID.
         * @param {FatcaW9Input} [fatcaW9Input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCASaveW9Post: async (fatcaW9Input?: FatcaW9Input, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/FATCA/SaveW9`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fatcaW9Input, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FATCAApi - functional programming interface
 * @export
 */
export const FATCAApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FATCAApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves questions for a FATCA test.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCAQuestionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionsOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCAQuestionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA test based on a specific flow ID.
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCARefTypeRefIdAnswersGet(refId: string, refType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerFACTA>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCARefTypeRefIdAnswersGet(refId, refType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Tins by Flow ID
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCARefTypeRefIdGetTinsGet(refId: string, refType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TinInfoOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCARefTypeRefIdGetTinsGet(refId, refType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Saves answers for a FATCA test based on a specific flow ID.
         * @param {string} refId 
         * @param {string} refType 
         * @param {Array<AnswerInput>} [answerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCARefTypeRefIdSavePost(refId: string, refType: string, answerInput?: Array<AnswerInput>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Answer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCARefTypeRefIdSavePost(refId, refType, answerInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Saves Tins
         * @param {string} refId 
         * @param {string} refType 
         * @param {boolean} [isFatcaIndividualSelfCert] 
         * @param {Array<SaveTinInput>} [saveTinInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCARefTypeRefIdSaveTinsPost(refId: string, refType: string, isFatcaIndividualSelfCert?: boolean, saveTinInput?: Array<SaveTinInput>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCARefTypeRefIdSaveTinsPost(refId, refType, isFatcaIndividualSelfCert, saveTinInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA W8 test based on a specific flow ID.
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCARefTypeRefIdW8Get(refId: string, refType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFatcaW8Output>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCARefTypeRefIdW8Get(refId, refType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA W9 test based on a specific flow ID.
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCARefTypeRefIdW9Get(refId: string, refType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFatcaW9Output>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCARefTypeRefIdW9Get(refId, refType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Saves answers for a FATCA W8 test based on a specific flow ID.
         * @param {FatcaW8Input} [fatcaW8Input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCASaveW8Post(fatcaW8Input?: FatcaW8Input, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerW8ben>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCASaveW8Post(fatcaW8Input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Saves answers for a FATCA W9 test based on a specific flow ID.
         * @param {FatcaW9Input} [fatcaW9Input] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fATCASaveW9Post(fatcaW9Input?: FatcaW9Input, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerW9america>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fATCASaveW9Post(fatcaW9Input, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FATCAApi - factory interface
 * @export
 */
export const FATCAApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FATCAApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves questions for a FATCA test.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCAQuestionsGet(options?: AxiosRequestConfig): AxiosPromise<QuestionsOutput> {
            return localVarFp.fATCAQuestionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA test based on a specific flow ID.
         * @param {FATCAApiFATCARefTypeRefIdAnswersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCARefTypeRefIdAnswersGet(requestParameters: FATCAApiFATCARefTypeRefIdAnswersGetRequest, options?: AxiosRequestConfig): AxiosPromise<AnswerFACTA> {
            return localVarFp.fATCARefTypeRefIdAnswersGet(requestParameters.refId, requestParameters.refType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Tins by Flow ID
         * @param {FATCAApiFATCARefTypeRefIdGetTinsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCARefTypeRefIdGetTinsGet(requestParameters: FATCAApiFATCARefTypeRefIdGetTinsGetRequest, options?: AxiosRequestConfig): AxiosPromise<TinInfoOutput> {
            return localVarFp.fATCARefTypeRefIdGetTinsGet(requestParameters.refId, requestParameters.refType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Saves answers for a FATCA test based on a specific flow ID.
         * @param {FATCAApiFATCARefTypeRefIdSavePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCARefTypeRefIdSavePost(requestParameters: FATCAApiFATCARefTypeRefIdSavePostRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Answer>> {
            return localVarFp.fATCARefTypeRefIdSavePost(requestParameters.refId, requestParameters.refType, requestParameters.answerInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Saves Tins
         * @param {FATCAApiFATCARefTypeRefIdSaveTinsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCARefTypeRefIdSaveTinsPost(requestParameters: FATCAApiFATCARefTypeRefIdSaveTinsPostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.fATCARefTypeRefIdSaveTinsPost(requestParameters.refId, requestParameters.refType, requestParameters.isFatcaIndividualSelfCert, requestParameters.saveTinInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA W8 test based on a specific flow ID.
         * @param {FATCAApiFATCARefTypeRefIdW8GetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCARefTypeRefIdW8Get(requestParameters: FATCAApiFATCARefTypeRefIdW8GetRequest, options?: AxiosRequestConfig): AxiosPromise<GetFatcaW8Output> {
            return localVarFp.fATCARefTypeRefIdW8Get(requestParameters.refId, requestParameters.refType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves answers for a FATCA W9 test based on a specific flow ID.
         * @param {FATCAApiFATCARefTypeRefIdW9GetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCARefTypeRefIdW9Get(requestParameters: FATCAApiFATCARefTypeRefIdW9GetRequest, options?: AxiosRequestConfig): AxiosPromise<GetFatcaW9Output> {
            return localVarFp.fATCARefTypeRefIdW9Get(requestParameters.refId, requestParameters.refType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Saves answers for a FATCA W8 test based on a specific flow ID.
         * @param {FATCAApiFATCASaveW8PostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCASaveW8Post(requestParameters: FATCAApiFATCASaveW8PostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CustomerW8ben> {
            return localVarFp.fATCASaveW8Post(requestParameters.fatcaW8Input, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Saves answers for a FATCA W9 test based on a specific flow ID.
         * @param {FATCAApiFATCASaveW9PostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fATCASaveW9Post(requestParameters: FATCAApiFATCASaveW9PostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CustomerW9america> {
            return localVarFp.fATCASaveW9Post(requestParameters.fatcaW9Input, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for fATCARefTypeRefIdAnswersGet operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCARefTypeRefIdAnswersGetRequest
 */
export interface FATCAApiFATCARefTypeRefIdAnswersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCARefTypeRefIdAnswersGet
     */
    readonly refId: string

    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCARefTypeRefIdAnswersGet
     */
    readonly refType: string
}

/**
 * Request parameters for fATCARefTypeRefIdGetTinsGet operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCARefTypeRefIdGetTinsGetRequest
 */
export interface FATCAApiFATCARefTypeRefIdGetTinsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCARefTypeRefIdGetTinsGet
     */
    readonly refId: string

    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCARefTypeRefIdGetTinsGet
     */
    readonly refType: string
}

/**
 * Request parameters for fATCARefTypeRefIdSavePost operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCARefTypeRefIdSavePostRequest
 */
export interface FATCAApiFATCARefTypeRefIdSavePostRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCARefTypeRefIdSavePost
     */
    readonly refId: string

    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCARefTypeRefIdSavePost
     */
    readonly refType: string

    /**
     * 
     * @type {Array<AnswerInput>}
     * @memberof FATCAApiFATCARefTypeRefIdSavePost
     */
    readonly answerInput?: Array<AnswerInput>
}

/**
 * Request parameters for fATCARefTypeRefIdSaveTinsPost operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCARefTypeRefIdSaveTinsPostRequest
 */
export interface FATCAApiFATCARefTypeRefIdSaveTinsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCARefTypeRefIdSaveTinsPost
     */
    readonly refId: string

    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCARefTypeRefIdSaveTinsPost
     */
    readonly refType: string

    /**
     * 
     * @type {boolean}
     * @memberof FATCAApiFATCARefTypeRefIdSaveTinsPost
     */
    readonly isFatcaIndividualSelfCert?: boolean

    /**
     * 
     * @type {Array<SaveTinInput>}
     * @memberof FATCAApiFATCARefTypeRefIdSaveTinsPost
     */
    readonly saveTinInput?: Array<SaveTinInput>
}

/**
 * Request parameters for fATCARefTypeRefIdW8Get operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCARefTypeRefIdW8GetRequest
 */
export interface FATCAApiFATCARefTypeRefIdW8GetRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCARefTypeRefIdW8Get
     */
    readonly refId: string

    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCARefTypeRefIdW8Get
     */
    readonly refType: string
}

/**
 * Request parameters for fATCARefTypeRefIdW9Get operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCARefTypeRefIdW9GetRequest
 */
export interface FATCAApiFATCARefTypeRefIdW9GetRequest {
    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCARefTypeRefIdW9Get
     */
    readonly refId: string

    /**
     * 
     * @type {string}
     * @memberof FATCAApiFATCARefTypeRefIdW9Get
     */
    readonly refType: string
}

/**
 * Request parameters for fATCASaveW8Post operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCASaveW8PostRequest
 */
export interface FATCAApiFATCASaveW8PostRequest {
    /**
     * 
     * @type {FatcaW8Input}
     * @memberof FATCAApiFATCASaveW8Post
     */
    readonly fatcaW8Input?: FatcaW8Input
}

/**
 * Request parameters for fATCASaveW9Post operation in FATCAApi.
 * @export
 * @interface FATCAApiFATCASaveW9PostRequest
 */
export interface FATCAApiFATCASaveW9PostRequest {
    /**
     * 
     * @type {FatcaW9Input}
     * @memberof FATCAApiFATCASaveW9Post
     */
    readonly fatcaW9Input?: FatcaW9Input
}

/**
 * FATCAApi - object-oriented interface
 * @export
 * @class FATCAApi
 * @extends {BaseAPI}
 */
export class FATCAApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves questions for a FATCA test.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCAQuestionsGet(options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCAQuestionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves answers for a FATCA test based on a specific flow ID.
     * @param {FATCAApiFATCARefTypeRefIdAnswersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCARefTypeRefIdAnswersGet(requestParameters: FATCAApiFATCARefTypeRefIdAnswersGetRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCARefTypeRefIdAnswersGet(requestParameters.refId, requestParameters.refType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Tins by Flow ID
     * @param {FATCAApiFATCARefTypeRefIdGetTinsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCARefTypeRefIdGetTinsGet(requestParameters: FATCAApiFATCARefTypeRefIdGetTinsGetRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCARefTypeRefIdGetTinsGet(requestParameters.refId, requestParameters.refType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Saves answers for a FATCA test based on a specific flow ID.
     * @param {FATCAApiFATCARefTypeRefIdSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCARefTypeRefIdSavePost(requestParameters: FATCAApiFATCARefTypeRefIdSavePostRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCARefTypeRefIdSavePost(requestParameters.refId, requestParameters.refType, requestParameters.answerInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Saves Tins
     * @param {FATCAApiFATCARefTypeRefIdSaveTinsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCARefTypeRefIdSaveTinsPost(requestParameters: FATCAApiFATCARefTypeRefIdSaveTinsPostRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCARefTypeRefIdSaveTinsPost(requestParameters.refId, requestParameters.refType, requestParameters.isFatcaIndividualSelfCert, requestParameters.saveTinInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves answers for a FATCA W8 test based on a specific flow ID.
     * @param {FATCAApiFATCARefTypeRefIdW8GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCARefTypeRefIdW8Get(requestParameters: FATCAApiFATCARefTypeRefIdW8GetRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCARefTypeRefIdW8Get(requestParameters.refId, requestParameters.refType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves answers for a FATCA W9 test based on a specific flow ID.
     * @param {FATCAApiFATCARefTypeRefIdW9GetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCARefTypeRefIdW9Get(requestParameters: FATCAApiFATCARefTypeRefIdW9GetRequest, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCARefTypeRefIdW9Get(requestParameters.refId, requestParameters.refType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Saves answers for a FATCA W8 test based on a specific flow ID.
     * @param {FATCAApiFATCASaveW8PostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCASaveW8Post(requestParameters: FATCAApiFATCASaveW8PostRequest = {}, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCASaveW8Post(requestParameters.fatcaW8Input, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Saves answers for a FATCA W9 test based on a specific flow ID.
     * @param {FATCAApiFATCASaveW9PostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FATCAApi
     */
    public fATCASaveW9Post(requestParameters: FATCAApiFATCASaveW9PostRequest = {}, options?: AxiosRequestConfig) {
        return FATCAApiFp(this.configuration).fATCASaveW9Post(requestParameters.fatcaW9Input, options).then((request) => request(this.axios, this.basePath));
    }
}
