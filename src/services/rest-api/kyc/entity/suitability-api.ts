/* tslint:disable */
/* eslint-disable */
/**
 * KYC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.93
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnswerInput } from '../model';
// @ts-ignore
import { AnswerListDataResponse } from '../model';
// @ts-ignore
import { Int32NullableDataResponse } from '../model';
// @ts-ignore
import { QuestionsOutputDataResponse } from '../model';
/**
 * SuitabilityApi - axios parameter creator
 * @export
 */
export const SuitabilityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get All Answers By Flow ID
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suitabilityAnswersRefTypeRefIdGet: async (refId: string, refType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('suitabilityAnswersRefTypeRefIdGet', 'refId', refId)
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('suitabilityAnswersRefTypeRefIdGet', 'refType', refType)
            const localVarPath = `/Suitability/Answers/{refType}/{refId}`
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)))
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Question of Suitability Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suitabilityQuestionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Suitability/Questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save Answers By FlowId
         * @param {string} refType 
         * @param {string} refId 
         * @param {Array<AnswerInput>} [answerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suitabilitySaveRefTypeRefIdPost: async (refType: string, refId: string, answerInput?: Array<AnswerInput>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('suitabilitySaveRefTypeRefIdPost', 'refType', refType)
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('suitabilitySaveRefTypeRefIdPost', 'refId', refId)
            const localVarPath = `/Suitability/Save/{refType}/{refId}`
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)))
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(answerInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Answers By Flow ID
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suitabilitySummaryScoreRefTypeRefIdGet: async (refId: string, refType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('suitabilitySummaryScoreRefTypeRefIdGet', 'refId', refId)
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('suitabilitySummaryScoreRefTypeRefIdGet', 'refType', refType)
            const localVarPath = `/Suitability/SummaryScore/{refType}/{refId}`
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)))
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SuitabilityApi - functional programming interface
 * @export
 */
export const SuitabilityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SuitabilityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get All Answers By Flow ID
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suitabilityAnswersRefTypeRefIdGet(refId: string, refType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suitabilityAnswersRefTypeRefIdGet(refId, refType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Question of Suitability Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suitabilityQuestionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionsOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suitabilityQuestionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save Answers By FlowId
         * @param {string} refType 
         * @param {string} refId 
         * @param {Array<AnswerInput>} [answerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suitabilitySaveRefTypeRefIdPost(refType: string, refId: string, answerInput?: Array<AnswerInput>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suitabilitySaveRefTypeRefIdPost(refType, refId, answerInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Answers By Flow ID
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async suitabilitySummaryScoreRefTypeRefIdGet(refId: string, refType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Int32NullableDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.suitabilitySummaryScoreRefTypeRefIdGet(refId, refType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SuitabilityApi - factory interface
 * @export
 */
export const SuitabilityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SuitabilityApiFp(configuration)
    return {
        /**
         * 
         * @summary Get All Answers By Flow ID
         * @param {SuitabilityApiSuitabilityAnswersRefTypeRefIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suitabilityAnswersRefTypeRefIdGet(requestParameters: SuitabilityApiSuitabilityAnswersRefTypeRefIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<AnswerListDataResponse> {
            return localVarFp.suitabilityAnswersRefTypeRefIdGet(requestParameters.refId, requestParameters.refType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Question of Suitability Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suitabilityQuestionsGet(options?: AxiosRequestConfig): AxiosPromise<QuestionsOutputDataResponse> {
            return localVarFp.suitabilityQuestionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save Answers By FlowId
         * @param {SuitabilityApiSuitabilitySaveRefTypeRefIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suitabilitySaveRefTypeRefIdPost(requestParameters: SuitabilityApiSuitabilitySaveRefTypeRefIdPostRequest, options?: AxiosRequestConfig): AxiosPromise<AnswerListDataResponse> {
            return localVarFp.suitabilitySaveRefTypeRefIdPost(requestParameters.refType, requestParameters.refId, requestParameters.answerInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Answers By Flow ID
         * @param {SuitabilityApiSuitabilitySummaryScoreRefTypeRefIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suitabilitySummaryScoreRefTypeRefIdGet(requestParameters: SuitabilityApiSuitabilitySummaryScoreRefTypeRefIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<Int32NullableDataResponse> {
            return localVarFp.suitabilitySummaryScoreRefTypeRefIdGet(requestParameters.refId, requestParameters.refType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for suitabilityAnswersRefTypeRefIdGet operation in SuitabilityApi.
 * @export
 * @interface SuitabilityApiSuitabilityAnswersRefTypeRefIdGetRequest
 */
export interface SuitabilityApiSuitabilityAnswersRefTypeRefIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SuitabilityApiSuitabilityAnswersRefTypeRefIdGet
     */
    readonly refId: string

    /**
     * 
     * @type {string}
     * @memberof SuitabilityApiSuitabilityAnswersRefTypeRefIdGet
     */
    readonly refType: string
}

/**
 * Request parameters for suitabilitySaveRefTypeRefIdPost operation in SuitabilityApi.
 * @export
 * @interface SuitabilityApiSuitabilitySaveRefTypeRefIdPostRequest
 */
export interface SuitabilityApiSuitabilitySaveRefTypeRefIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SuitabilityApiSuitabilitySaveRefTypeRefIdPost
     */
    readonly refType: string

    /**
     * 
     * @type {string}
     * @memberof SuitabilityApiSuitabilitySaveRefTypeRefIdPost
     */
    readonly refId: string

    /**
     * 
     * @type {Array<AnswerInput>}
     * @memberof SuitabilityApiSuitabilitySaveRefTypeRefIdPost
     */
    readonly answerInput?: Array<AnswerInput>
}

/**
 * Request parameters for suitabilitySummaryScoreRefTypeRefIdGet operation in SuitabilityApi.
 * @export
 * @interface SuitabilityApiSuitabilitySummaryScoreRefTypeRefIdGetRequest
 */
export interface SuitabilityApiSuitabilitySummaryScoreRefTypeRefIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SuitabilityApiSuitabilitySummaryScoreRefTypeRefIdGet
     */
    readonly refId: string

    /**
     * 
     * @type {string}
     * @memberof SuitabilityApiSuitabilitySummaryScoreRefTypeRefIdGet
     */
    readonly refType: string
}

/**
 * SuitabilityApi - object-oriented interface
 * @export
 * @class SuitabilityApi
 * @extends {BaseAPI}
 */
export class SuitabilityApi extends BaseAPI {
    /**
     * 
     * @summary Get All Answers By Flow ID
     * @param {SuitabilityApiSuitabilityAnswersRefTypeRefIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitabilityApi
     */
    public suitabilityAnswersRefTypeRefIdGet(requestParameters: SuitabilityApiSuitabilityAnswersRefTypeRefIdGetRequest, options?: AxiosRequestConfig) {
        return SuitabilityApiFp(this.configuration).suitabilityAnswersRefTypeRefIdGet(requestParameters.refId, requestParameters.refType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Question of Suitability Test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitabilityApi
     */
    public suitabilityQuestionsGet(options?: AxiosRequestConfig) {
        return SuitabilityApiFp(this.configuration).suitabilityQuestionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save Answers By FlowId
     * @param {SuitabilityApiSuitabilitySaveRefTypeRefIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitabilityApi
     */
    public suitabilitySaveRefTypeRefIdPost(requestParameters: SuitabilityApiSuitabilitySaveRefTypeRefIdPostRequest, options?: AxiosRequestConfig) {
        return SuitabilityApiFp(this.configuration).suitabilitySaveRefTypeRefIdPost(requestParameters.refType, requestParameters.refId, requestParameters.answerInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Answers By Flow ID
     * @param {SuitabilityApiSuitabilitySummaryScoreRefTypeRefIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuitabilityApi
     */
    public suitabilitySummaryScoreRefTypeRefIdGet(requestParameters: SuitabilityApiSuitabilitySummaryScoreRefTypeRefIdGetRequest, options?: AxiosRequestConfig) {
        return SuitabilityApiFp(this.configuration).suitabilitySummaryScoreRefTypeRefIdGet(requestParameters.refId, requestParameters.refType, options).then((request) => request(this.axios, this.basePath));
    }
}
