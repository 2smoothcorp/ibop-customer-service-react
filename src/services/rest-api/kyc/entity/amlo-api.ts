/* tslint:disable */
/* eslint-disable */
/**
 * KYC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.93
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AmloSearchInput } from '../model';
// @ts-ignore
import { AmloSearchOutputListDataResponse } from '../model';
/**
 * AmloApi - axios parameter creator
 * @export
 */
export const AmloApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Searches
         * @param {AmloSearchInput} [amloSearchInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amloSearchPost: async (amloSearchInput?: AmloSearchInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Amlo/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(amloSearchInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmloApi - functional programming interface
 * @export
 */
export const AmloApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmloApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Searches
         * @param {AmloSearchInput} [amloSearchInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async amloSearchPost(amloSearchInput?: AmloSearchInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AmloSearchOutputListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.amloSearchPost(amloSearchInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmloApi - factory interface
 * @export
 */
export const AmloApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmloApiFp(configuration)
    return {
        /**
         * 
         * @summary Searches
         * @param {AmloApiAmloSearchPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amloSearchPost(requestParameters: AmloApiAmloSearchPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AmloSearchOutputListDataResponse> {
            return localVarFp.amloSearchPost(requestParameters.amloSearchInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for amloSearchPost operation in AmloApi.
 * @export
 * @interface AmloApiAmloSearchPostRequest
 */
export interface AmloApiAmloSearchPostRequest {
    /**
     * 
     * @type {AmloSearchInput}
     * @memberof AmloApiAmloSearchPost
     */
    readonly amloSearchInput?: AmloSearchInput
}

/**
 * AmloApi - object-oriented interface
 * @export
 * @class AmloApi
 * @extends {BaseAPI}
 */
export class AmloApi extends BaseAPI {
    /**
     * 
     * @summary Searches
     * @param {AmloApiAmloSearchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmloApi
     */
    public amloSearchPost(requestParameters: AmloApiAmloSearchPostRequest = {}, options?: AxiosRequestConfig) {
        return AmloApiFp(this.configuration).amloSearchPost(requestParameters.amloSearchInput, options).then((request) => request(this.axios, this.basePath));
    }
}
