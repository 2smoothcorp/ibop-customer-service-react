/* tslint:disable */
/* eslint-disable */
/**
 * KYC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.93
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BaseResponse } from '../model';
// @ts-ignore
import { ConsentAccountInput } from '../model';
// @ts-ignore
import { ConsentAnsweredOutputDataResponse } from '../model';
// @ts-ignore
import { ConsentQuestionOutputDataResponse } from '../model';
// @ts-ignore
import { ConsentSaveInput } from '../model';
/**
 * ConsentApi - axios parameter creator
 * @export
 */
export const ConsentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} formId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentFormIdGetQuestionGet: async (formId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            assertParamExists('consentFormIdGetQuestionGet', 'formId', formId)
            const localVarPath = `/Consent/{formId}/GetQuestion`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} referenceId 
         * @param {string} [formId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentReferenceIdGetAnsweredGet: async (referenceId: string, formId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceId' is not null or undefined
            assertParamExists('consentReferenceIdGetAnsweredGet', 'referenceId', referenceId)
            const localVarPath = `/Consent/{referenceId}/GetAnswered`
                .replace(`{${"referenceId"}}`, encodeURIComponent(String(referenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (formId !== undefined) {
                localVarQueryParameter['formId'] = formId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [referenceId] 
         * @param {ConsentSaveInput} [consentSaveInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentSavePost: async (referenceId?: string, consentSaveInput?: ConsentSaveInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Consent/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (referenceId !== undefined) {
                localVarQueryParameter['referenceId'] = referenceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(consentSaveInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ConsentAccountInput} [consentAccountInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentUpdateAccountNoPost: async (consentAccountInput?: ConsentAccountInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Consent/UpdateAccountNo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(consentAccountInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsentApi - functional programming interface
 * @export
 */
export const ConsentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} formId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consentFormIdGetQuestionGet(formId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentQuestionOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.consentFormIdGetQuestionGet(formId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} referenceId 
         * @param {string} [formId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consentReferenceIdGetAnsweredGet(referenceId: string, formId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentAnsweredOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.consentReferenceIdGetAnsweredGet(referenceId, formId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [referenceId] 
         * @param {ConsentSaveInput} [consentSaveInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consentSavePost(referenceId?: string, consentSaveInput?: ConsentSaveInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.consentSavePost(referenceId, consentSaveInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ConsentAccountInput} [consentAccountInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async consentUpdateAccountNoPost(consentAccountInput?: ConsentAccountInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.consentUpdateAccountNoPost(consentAccountInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConsentApi - factory interface
 * @export
 */
export const ConsentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsentApiFp(configuration)
    return {
        /**
         * 
         * @param {ConsentApiConsentFormIdGetQuestionGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentFormIdGetQuestionGet(requestParameters: ConsentApiConsentFormIdGetQuestionGetRequest, options?: AxiosRequestConfig): AxiosPromise<ConsentQuestionOutputDataResponse> {
            return localVarFp.consentFormIdGetQuestionGet(requestParameters.formId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ConsentApiConsentReferenceIdGetAnsweredGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentReferenceIdGetAnsweredGet(requestParameters: ConsentApiConsentReferenceIdGetAnsweredGetRequest, options?: AxiosRequestConfig): AxiosPromise<ConsentAnsweredOutputDataResponse> {
            return localVarFp.consentReferenceIdGetAnsweredGet(requestParameters.referenceId, requestParameters.formId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ConsentApiConsentSavePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentSavePost(requestParameters: ConsentApiConsentSavePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.consentSavePost(requestParameters.referenceId, requestParameters.consentSaveInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ConsentApiConsentUpdateAccountNoPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consentUpdateAccountNoPost(requestParameters: ConsentApiConsentUpdateAccountNoPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BaseResponse> {
            return localVarFp.consentUpdateAccountNoPost(requestParameters.consentAccountInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for consentFormIdGetQuestionGet operation in ConsentApi.
 * @export
 * @interface ConsentApiConsentFormIdGetQuestionGetRequest
 */
export interface ConsentApiConsentFormIdGetQuestionGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsentApiConsentFormIdGetQuestionGet
     */
    readonly formId: string
}

/**
 * Request parameters for consentReferenceIdGetAnsweredGet operation in ConsentApi.
 * @export
 * @interface ConsentApiConsentReferenceIdGetAnsweredGetRequest
 */
export interface ConsentApiConsentReferenceIdGetAnsweredGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsentApiConsentReferenceIdGetAnsweredGet
     */
    readonly referenceId: string

    /**
     * 
     * @type {string}
     * @memberof ConsentApiConsentReferenceIdGetAnsweredGet
     */
    readonly formId?: string
}

/**
 * Request parameters for consentSavePost operation in ConsentApi.
 * @export
 * @interface ConsentApiConsentSavePostRequest
 */
export interface ConsentApiConsentSavePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsentApiConsentSavePost
     */
    readonly referenceId?: string

    /**
     * 
     * @type {ConsentSaveInput}
     * @memberof ConsentApiConsentSavePost
     */
    readonly consentSaveInput?: ConsentSaveInput
}

/**
 * Request parameters for consentUpdateAccountNoPost operation in ConsentApi.
 * @export
 * @interface ConsentApiConsentUpdateAccountNoPostRequest
 */
export interface ConsentApiConsentUpdateAccountNoPostRequest {
    /**
     * 
     * @type {ConsentAccountInput}
     * @memberof ConsentApiConsentUpdateAccountNoPost
     */
    readonly consentAccountInput?: ConsentAccountInput
}

/**
 * ConsentApi - object-oriented interface
 * @export
 * @class ConsentApi
 * @extends {BaseAPI}
 */
export class ConsentApi extends BaseAPI {
    /**
     * 
     * @param {ConsentApiConsentFormIdGetQuestionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public consentFormIdGetQuestionGet(requestParameters: ConsentApiConsentFormIdGetQuestionGetRequest, options?: AxiosRequestConfig) {
        return ConsentApiFp(this.configuration).consentFormIdGetQuestionGet(requestParameters.formId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ConsentApiConsentReferenceIdGetAnsweredGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public consentReferenceIdGetAnsweredGet(requestParameters: ConsentApiConsentReferenceIdGetAnsweredGetRequest, options?: AxiosRequestConfig) {
        return ConsentApiFp(this.configuration).consentReferenceIdGetAnsweredGet(requestParameters.referenceId, requestParameters.formId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ConsentApiConsentSavePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public consentSavePost(requestParameters: ConsentApiConsentSavePostRequest = {}, options?: AxiosRequestConfig) {
        return ConsentApiFp(this.configuration).consentSavePost(requestParameters.referenceId, requestParameters.consentSaveInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ConsentApiConsentUpdateAccountNoPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsentApi
     */
    public consentUpdateAccountNoPost(requestParameters: ConsentApiConsentUpdateAccountNoPostRequest = {}, options?: AxiosRequestConfig) {
        return ConsentApiFp(this.configuration).consentUpdateAccountNoPost(requestParameters.consentAccountInput, options).then((request) => request(this.axios, this.basePath));
    }
}
