/* tslint:disable */
/* eslint-disable */
/**
 * KYC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.93
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ComplianceDataResponse } from '../model';
// @ts-ignore
import { ComplianceInput } from '../model';
// @ts-ignore
import { ComplianceOutputDataResponse } from '../model';
// @ts-ignore
import { IsComplianceOutputDataResponse } from '../model';
/**
 * ComplianceApi - axios parameter creator
 * @export
 */
export const ComplianceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} applicantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complianceApplicantIdGetComplianceGet: async (applicantId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicantId' is not null or undefined
            assertParamExists('complianceApplicantIdGetComplianceGet', 'applicantId', applicantId)
            const localVarPath = `/Compliance/{applicantId}/GetCompliance`
                .replace(`{${"applicantId"}}`, encodeURIComponent(String(applicantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complianceIsComplianceEmployeePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Compliance/IsComplianceEmployee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ComplianceInput} [complianceInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complianceSaveCompliancePost: async (complianceInput?: ComplianceInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Compliance/SaveCompliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(complianceInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComplianceApi - functional programming interface
 * @export
 */
export const ComplianceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ComplianceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} applicantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async complianceApplicantIdGetComplianceGet(applicantId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComplianceOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.complianceApplicantIdGetComplianceGet(applicantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async complianceIsComplianceEmployeePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IsComplianceOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.complianceIsComplianceEmployeePost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ComplianceInput} [complianceInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async complianceSaveCompliancePost(complianceInput?: ComplianceInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComplianceDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.complianceSaveCompliancePost(complianceInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ComplianceApi - factory interface
 * @export
 */
export const ComplianceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ComplianceApiFp(configuration)
    return {
        /**
         * 
         * @param {ComplianceApiComplianceApplicantIdGetComplianceGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complianceApplicantIdGetComplianceGet(requestParameters: ComplianceApiComplianceApplicantIdGetComplianceGetRequest, options?: AxiosRequestConfig): AxiosPromise<ComplianceOutputDataResponse> {
            return localVarFp.complianceApplicantIdGetComplianceGet(requestParameters.applicantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complianceIsComplianceEmployeePost(options?: AxiosRequestConfig): AxiosPromise<IsComplianceOutputDataResponse> {
            return localVarFp.complianceIsComplianceEmployeePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ComplianceApiComplianceSaveCompliancePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complianceSaveCompliancePost(requestParameters: ComplianceApiComplianceSaveCompliancePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ComplianceDataResponse> {
            return localVarFp.complianceSaveCompliancePost(requestParameters.complianceInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for complianceApplicantIdGetComplianceGet operation in ComplianceApi.
 * @export
 * @interface ComplianceApiComplianceApplicantIdGetComplianceGetRequest
 */
export interface ComplianceApiComplianceApplicantIdGetComplianceGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ComplianceApiComplianceApplicantIdGetComplianceGet
     */
    readonly applicantId: number
}

/**
 * Request parameters for complianceSaveCompliancePost operation in ComplianceApi.
 * @export
 * @interface ComplianceApiComplianceSaveCompliancePostRequest
 */
export interface ComplianceApiComplianceSaveCompliancePostRequest {
    /**
     * 
     * @type {ComplianceInput}
     * @memberof ComplianceApiComplianceSaveCompliancePost
     */
    readonly complianceInput?: ComplianceInput
}

/**
 * ComplianceApi - object-oriented interface
 * @export
 * @class ComplianceApi
 * @extends {BaseAPI}
 */
export class ComplianceApi extends BaseAPI {
    /**
     * 
     * @param {ComplianceApiComplianceApplicantIdGetComplianceGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public complianceApplicantIdGetComplianceGet(requestParameters: ComplianceApiComplianceApplicantIdGetComplianceGetRequest, options?: AxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).complianceApplicantIdGetComplianceGet(requestParameters.applicantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public complianceIsComplianceEmployeePost(options?: AxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).complianceIsComplianceEmployeePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ComplianceApiComplianceSaveCompliancePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public complianceSaveCompliancePost(requestParameters: ComplianceApiComplianceSaveCompliancePostRequest = {}, options?: AxiosRequestConfig) {
        return ComplianceApiFp(this.configuration).complianceSaveCompliancePost(requestParameters.complianceInput, options).then((request) => request(this.axios, this.basePath));
    }
}
