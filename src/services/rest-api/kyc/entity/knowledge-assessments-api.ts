/* tslint:disable */
/* eslint-disable */
/**
 * KYC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.93
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnswerInput } from '../model';
// @ts-ignore
import { AnswerListDataResponse } from '../model';
// @ts-ignore
import { QuestionsOutputDataResponse } from '../model';
/**
 * KnowledgeAssessmentsApi - axios parameter creator
 * @export
 */
export const KnowledgeAssessmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves answers for a knowledge assessment or suitability test based on a specific flow ID.
         * @param {string} refType 
         * @param {string} refId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        knowledgeAssessmentsAnswersRefTypeRefIdGet: async (refType: string, refId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('knowledgeAssessmentsAnswersRefTypeRefIdGet', 'refType', refType)
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('knowledgeAssessmentsAnswersRefTypeRefIdGet', 'refId', refId)
            const localVarPath = `/KnowledgeAssessments/Answers/{refType}/{refId}`
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)))
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves questions for a knowledge assessment or suitability test.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        knowledgeAssessmentsQuestionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/KnowledgeAssessments/Questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Saves answers for a knowledge assessment or suitability test based on a specific flow ID.
         * @param {string} refType 
         * @param {string} refId 
         * @param {Array<AnswerInput>} [answerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        knowledgeAssessmentsSaveRefTypeRefIdPost: async (refType: string, refId: string, answerInput?: Array<AnswerInput>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('knowledgeAssessmentsSaveRefTypeRefIdPost', 'refType', refType)
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('knowledgeAssessmentsSaveRefTypeRefIdPost', 'refId', refId)
            const localVarPath = `/KnowledgeAssessments/Save/{refType}/{refId}`
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)))
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(answerInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KnowledgeAssessmentsApi - functional programming interface
 * @export
 */
export const KnowledgeAssessmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KnowledgeAssessmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves answers for a knowledge assessment or suitability test based on a specific flow ID.
         * @param {string} refType 
         * @param {string} refId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async knowledgeAssessmentsAnswersRefTypeRefIdGet(refType: string, refId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.knowledgeAssessmentsAnswersRefTypeRefIdGet(refType, refId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves questions for a knowledge assessment or suitability test.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async knowledgeAssessmentsQuestionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionsOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.knowledgeAssessmentsQuestionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Saves answers for a knowledge assessment or suitability test based on a specific flow ID.
         * @param {string} refType 
         * @param {string} refId 
         * @param {Array<AnswerInput>} [answerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async knowledgeAssessmentsSaveRefTypeRefIdPost(refType: string, refId: string, answerInput?: Array<AnswerInput>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.knowledgeAssessmentsSaveRefTypeRefIdPost(refType, refId, answerInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KnowledgeAssessmentsApi - factory interface
 * @export
 */
export const KnowledgeAssessmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KnowledgeAssessmentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves answers for a knowledge assessment or suitability test based on a specific flow ID.
         * @param {KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersRefTypeRefIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        knowledgeAssessmentsAnswersRefTypeRefIdGet(requestParameters: KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersRefTypeRefIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<AnswerListDataResponse> {
            return localVarFp.knowledgeAssessmentsAnswersRefTypeRefIdGet(requestParameters.refType, requestParameters.refId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves questions for a knowledge assessment or suitability test.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        knowledgeAssessmentsQuestionsGet(options?: AxiosRequestConfig): AxiosPromise<QuestionsOutputDataResponse> {
            return localVarFp.knowledgeAssessmentsQuestionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Saves answers for a knowledge assessment or suitability test based on a specific flow ID.
         * @param {KnowledgeAssessmentsApiKnowledgeAssessmentsSaveRefTypeRefIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        knowledgeAssessmentsSaveRefTypeRefIdPost(requestParameters: KnowledgeAssessmentsApiKnowledgeAssessmentsSaveRefTypeRefIdPostRequest, options?: AxiosRequestConfig): AxiosPromise<AnswerListDataResponse> {
            return localVarFp.knowledgeAssessmentsSaveRefTypeRefIdPost(requestParameters.refType, requestParameters.refId, requestParameters.answerInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for knowledgeAssessmentsAnswersRefTypeRefIdGet operation in KnowledgeAssessmentsApi.
 * @export
 * @interface KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersRefTypeRefIdGetRequest
 */
export interface KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersRefTypeRefIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersRefTypeRefIdGet
     */
    readonly refType: string

    /**
     * 
     * @type {string}
     * @memberof KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersRefTypeRefIdGet
     */
    readonly refId: string
}

/**
 * Request parameters for knowledgeAssessmentsSaveRefTypeRefIdPost operation in KnowledgeAssessmentsApi.
 * @export
 * @interface KnowledgeAssessmentsApiKnowledgeAssessmentsSaveRefTypeRefIdPostRequest
 */
export interface KnowledgeAssessmentsApiKnowledgeAssessmentsSaveRefTypeRefIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof KnowledgeAssessmentsApiKnowledgeAssessmentsSaveRefTypeRefIdPost
     */
    readonly refType: string

    /**
     * 
     * @type {string}
     * @memberof KnowledgeAssessmentsApiKnowledgeAssessmentsSaveRefTypeRefIdPost
     */
    readonly refId: string

    /**
     * 
     * @type {Array<AnswerInput>}
     * @memberof KnowledgeAssessmentsApiKnowledgeAssessmentsSaveRefTypeRefIdPost
     */
    readonly answerInput?: Array<AnswerInput>
}

/**
 * KnowledgeAssessmentsApi - object-oriented interface
 * @export
 * @class KnowledgeAssessmentsApi
 * @extends {BaseAPI}
 */
export class KnowledgeAssessmentsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves answers for a knowledge assessment or suitability test based on a specific flow ID.
     * @param {KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersRefTypeRefIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeAssessmentsApi
     */
    public knowledgeAssessmentsAnswersRefTypeRefIdGet(requestParameters: KnowledgeAssessmentsApiKnowledgeAssessmentsAnswersRefTypeRefIdGetRequest, options?: AxiosRequestConfig) {
        return KnowledgeAssessmentsApiFp(this.configuration).knowledgeAssessmentsAnswersRefTypeRefIdGet(requestParameters.refType, requestParameters.refId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves questions for a knowledge assessment or suitability test.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeAssessmentsApi
     */
    public knowledgeAssessmentsQuestionsGet(options?: AxiosRequestConfig) {
        return KnowledgeAssessmentsApiFp(this.configuration).knowledgeAssessmentsQuestionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Saves answers for a knowledge assessment or suitability test based on a specific flow ID.
     * @param {KnowledgeAssessmentsApiKnowledgeAssessmentsSaveRefTypeRefIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeAssessmentsApi
     */
    public knowledgeAssessmentsSaveRefTypeRefIdPost(requestParameters: KnowledgeAssessmentsApiKnowledgeAssessmentsSaveRefTypeRefIdPostRequest, options?: AxiosRequestConfig) {
        return KnowledgeAssessmentsApiFp(this.configuration).knowledgeAssessmentsSaveRefTypeRefIdPost(requestParameters.refType, requestParameters.refId, requestParameters.answerInput, options).then((request) => request(this.axios, this.basePath));
    }
}
