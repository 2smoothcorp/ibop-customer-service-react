/* tslint:disable */
/* eslint-disable */
/**
 * KYC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.93
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnswerInput } from '../model';
// @ts-ignore
import { AnswerListDataResponse } from '../model';
// @ts-ignore
import { Int32NullableDataResponse } from '../model';
// @ts-ignore
import { QuestionsOutputDataResponse } from '../model';
/**
 * QuestionaireApi - axios parameter creator
 * @export
 */
export const QuestionaireApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get All Answers By Flow ID
         * @param {string} questionnaireCode 
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionaireAnswersQuestionnaireCodeRefTypeRefIdGet: async (questionnaireCode: string, refId: string, refType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionnaireCode' is not null or undefined
            assertParamExists('questionaireAnswersQuestionnaireCodeRefTypeRefIdGet', 'questionnaireCode', questionnaireCode)
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('questionaireAnswersQuestionnaireCodeRefTypeRefIdGet', 'refId', refId)
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('questionaireAnswersQuestionnaireCodeRefTypeRefIdGet', 'refType', refType)
            const localVarPath = `/Questionaire/Answers/{questionnaireCode}/{refType}/{refId}`
                .replace(`{${"questionnaireCode"}}`, encodeURIComponent(String(questionnaireCode)))
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)))
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Question of Suitability Test
         * @param {string} questionnaireCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionaireQuestionsQuestionnaireCodeGet: async (questionnaireCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionnaireCode' is not null or undefined
            assertParamExists('questionaireQuestionsQuestionnaireCodeGet', 'questionnaireCode', questionnaireCode)
            const localVarPath = `/Questionaire/Questions/{questionnaireCode}`
                .replace(`{${"questionnaireCode"}}`, encodeURIComponent(String(questionnaireCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save Answers By FlowId
         * @param {string} questionnaireCode 
         * @param {string} refType 
         * @param {string} refId 
         * @param {Array<AnswerInput>} [answerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionaireSaveQuestionnaireCodeRefTypeRefIdPost: async (questionnaireCode: string, refType: string, refId: string, answerInput?: Array<AnswerInput>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionnaireCode' is not null or undefined
            assertParamExists('questionaireSaveQuestionnaireCodeRefTypeRefIdPost', 'questionnaireCode', questionnaireCode)
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('questionaireSaveQuestionnaireCodeRefTypeRefIdPost', 'refType', refType)
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('questionaireSaveQuestionnaireCodeRefTypeRefIdPost', 'refId', refId)
            const localVarPath = `/Questionaire/Save/{questionnaireCode}/{refType}/{refId}`
                .replace(`{${"questionnaireCode"}}`, encodeURIComponent(String(questionnaireCode)))
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)))
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(answerInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Answers By Flow ID
         * @param {string} questionnaireCode 
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet: async (questionnaireCode: string, refId: string, refType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionnaireCode' is not null or undefined
            assertParamExists('questionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet', 'questionnaireCode', questionnaireCode)
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('questionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet', 'refId', refId)
            // verify required parameter 'refType' is not null or undefined
            assertParamExists('questionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet', 'refType', refType)
            const localVarPath = `/Questionaire/SummaryScore/{questionnaireCode}/{refType}/{refId}`
                .replace(`{${"questionnaireCode"}}`, encodeURIComponent(String(questionnaireCode)))
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId)))
                .replace(`{${"refType"}}`, encodeURIComponent(String(refType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionaireApi - functional programming interface
 * @export
 */
export const QuestionaireApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuestionaireApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get All Answers By Flow ID
         * @param {string} questionnaireCode 
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async questionaireAnswersQuestionnaireCodeRefTypeRefIdGet(questionnaireCode: string, refId: string, refType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.questionaireAnswersQuestionnaireCodeRefTypeRefIdGet(questionnaireCode, refId, refType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Question of Suitability Test
         * @param {string} questionnaireCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async questionaireQuestionsQuestionnaireCodeGet(questionnaireCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionsOutputDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.questionaireQuestionsQuestionnaireCodeGet(questionnaireCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save Answers By FlowId
         * @param {string} questionnaireCode 
         * @param {string} refType 
         * @param {string} refId 
         * @param {Array<AnswerInput>} [answerInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async questionaireSaveQuestionnaireCodeRefTypeRefIdPost(questionnaireCode: string, refType: string, refId: string, answerInput?: Array<AnswerInput>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.questionaireSaveQuestionnaireCodeRefTypeRefIdPost(questionnaireCode, refType, refId, answerInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Answers By Flow ID
         * @param {string} questionnaireCode 
         * @param {string} refId 
         * @param {string} refType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async questionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet(questionnaireCode: string, refId: string, refType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Int32NullableDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.questionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet(questionnaireCode, refId, refType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuestionaireApi - factory interface
 * @export
 */
export const QuestionaireApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuestionaireApiFp(configuration)
    return {
        /**
         * 
         * @summary Get All Answers By Flow ID
         * @param {QuestionaireApiQuestionaireAnswersQuestionnaireCodeRefTypeRefIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionaireAnswersQuestionnaireCodeRefTypeRefIdGet(requestParameters: QuestionaireApiQuestionaireAnswersQuestionnaireCodeRefTypeRefIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<AnswerListDataResponse> {
            return localVarFp.questionaireAnswersQuestionnaireCodeRefTypeRefIdGet(requestParameters.questionnaireCode, requestParameters.refId, requestParameters.refType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Question of Suitability Test
         * @param {QuestionaireApiQuestionaireQuestionsQuestionnaireCodeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionaireQuestionsQuestionnaireCodeGet(requestParameters: QuestionaireApiQuestionaireQuestionsQuestionnaireCodeGetRequest, options?: AxiosRequestConfig): AxiosPromise<QuestionsOutputDataResponse> {
            return localVarFp.questionaireQuestionsQuestionnaireCodeGet(requestParameters.questionnaireCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save Answers By FlowId
         * @param {QuestionaireApiQuestionaireSaveQuestionnaireCodeRefTypeRefIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionaireSaveQuestionnaireCodeRefTypeRefIdPost(requestParameters: QuestionaireApiQuestionaireSaveQuestionnaireCodeRefTypeRefIdPostRequest, options?: AxiosRequestConfig): AxiosPromise<AnswerListDataResponse> {
            return localVarFp.questionaireSaveQuestionnaireCodeRefTypeRefIdPost(requestParameters.questionnaireCode, requestParameters.refType, requestParameters.refId, requestParameters.answerInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Answers By Flow ID
         * @param {QuestionaireApiQuestionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet(requestParameters: QuestionaireApiQuestionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<Int32NullableDataResponse> {
            return localVarFp.questionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet(requestParameters.questionnaireCode, requestParameters.refId, requestParameters.refType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for questionaireAnswersQuestionnaireCodeRefTypeRefIdGet operation in QuestionaireApi.
 * @export
 * @interface QuestionaireApiQuestionaireAnswersQuestionnaireCodeRefTypeRefIdGetRequest
 */
export interface QuestionaireApiQuestionaireAnswersQuestionnaireCodeRefTypeRefIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof QuestionaireApiQuestionaireAnswersQuestionnaireCodeRefTypeRefIdGet
     */
    readonly questionnaireCode: string

    /**
     * 
     * @type {string}
     * @memberof QuestionaireApiQuestionaireAnswersQuestionnaireCodeRefTypeRefIdGet
     */
    readonly refId: string

    /**
     * 
     * @type {string}
     * @memberof QuestionaireApiQuestionaireAnswersQuestionnaireCodeRefTypeRefIdGet
     */
    readonly refType: string
}

/**
 * Request parameters for questionaireQuestionsQuestionnaireCodeGet operation in QuestionaireApi.
 * @export
 * @interface QuestionaireApiQuestionaireQuestionsQuestionnaireCodeGetRequest
 */
export interface QuestionaireApiQuestionaireQuestionsQuestionnaireCodeGetRequest {
    /**
     * 
     * @type {string}
     * @memberof QuestionaireApiQuestionaireQuestionsQuestionnaireCodeGet
     */
    readonly questionnaireCode: string
}

/**
 * Request parameters for questionaireSaveQuestionnaireCodeRefTypeRefIdPost operation in QuestionaireApi.
 * @export
 * @interface QuestionaireApiQuestionaireSaveQuestionnaireCodeRefTypeRefIdPostRequest
 */
export interface QuestionaireApiQuestionaireSaveQuestionnaireCodeRefTypeRefIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof QuestionaireApiQuestionaireSaveQuestionnaireCodeRefTypeRefIdPost
     */
    readonly questionnaireCode: string

    /**
     * 
     * @type {string}
     * @memberof QuestionaireApiQuestionaireSaveQuestionnaireCodeRefTypeRefIdPost
     */
    readonly refType: string

    /**
     * 
     * @type {string}
     * @memberof QuestionaireApiQuestionaireSaveQuestionnaireCodeRefTypeRefIdPost
     */
    readonly refId: string

    /**
     * 
     * @type {Array<AnswerInput>}
     * @memberof QuestionaireApiQuestionaireSaveQuestionnaireCodeRefTypeRefIdPost
     */
    readonly answerInput?: Array<AnswerInput>
}

/**
 * Request parameters for questionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet operation in QuestionaireApi.
 * @export
 * @interface QuestionaireApiQuestionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGetRequest
 */
export interface QuestionaireApiQuestionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof QuestionaireApiQuestionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet
     */
    readonly questionnaireCode: string

    /**
     * 
     * @type {string}
     * @memberof QuestionaireApiQuestionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet
     */
    readonly refId: string

    /**
     * 
     * @type {string}
     * @memberof QuestionaireApiQuestionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet
     */
    readonly refType: string
}

/**
 * QuestionaireApi - object-oriented interface
 * @export
 * @class QuestionaireApi
 * @extends {BaseAPI}
 */
export class QuestionaireApi extends BaseAPI {
    /**
     * 
     * @summary Get All Answers By Flow ID
     * @param {QuestionaireApiQuestionaireAnswersQuestionnaireCodeRefTypeRefIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionaireApi
     */
    public questionaireAnswersQuestionnaireCodeRefTypeRefIdGet(requestParameters: QuestionaireApiQuestionaireAnswersQuestionnaireCodeRefTypeRefIdGetRequest, options?: AxiosRequestConfig) {
        return QuestionaireApiFp(this.configuration).questionaireAnswersQuestionnaireCodeRefTypeRefIdGet(requestParameters.questionnaireCode, requestParameters.refId, requestParameters.refType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Question of Suitability Test
     * @param {QuestionaireApiQuestionaireQuestionsQuestionnaireCodeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionaireApi
     */
    public questionaireQuestionsQuestionnaireCodeGet(requestParameters: QuestionaireApiQuestionaireQuestionsQuestionnaireCodeGetRequest, options?: AxiosRequestConfig) {
        return QuestionaireApiFp(this.configuration).questionaireQuestionsQuestionnaireCodeGet(requestParameters.questionnaireCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save Answers By FlowId
     * @param {QuestionaireApiQuestionaireSaveQuestionnaireCodeRefTypeRefIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionaireApi
     */
    public questionaireSaveQuestionnaireCodeRefTypeRefIdPost(requestParameters: QuestionaireApiQuestionaireSaveQuestionnaireCodeRefTypeRefIdPostRequest, options?: AxiosRequestConfig) {
        return QuestionaireApiFp(this.configuration).questionaireSaveQuestionnaireCodeRefTypeRefIdPost(requestParameters.questionnaireCode, requestParameters.refType, requestParameters.refId, requestParameters.answerInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Answers By Flow ID
     * @param {QuestionaireApiQuestionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionaireApi
     */
    public questionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet(requestParameters: QuestionaireApiQuestionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGetRequest, options?: AxiosRequestConfig) {
        return QuestionaireApiFp(this.configuration).questionaireSummaryScoreQuestionnaireCodeRefTypeRefIdGet(requestParameters.questionnaireCode, requestParameters.refId, requestParameters.refType, options).then((request) => request(this.axios, this.basePath));
    }
}
