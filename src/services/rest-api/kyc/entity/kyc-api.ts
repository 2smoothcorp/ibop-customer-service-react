/* tslint:disable */
/* eslint-disable */
/**
 * KYC API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.93
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApplicantResponseApplicantResponsePaginationDataResponse } from '../model';
// @ts-ignore
import { KycApplicant } from '../model';
// @ts-ignore
import { RelatePersonGetRequest } from '../model';
// @ts-ignore
import { RelatePersonResponseListDataResponse } from '../model';
// @ts-ignore
import { RiskLevelResultResponseDataResponse } from '../model';
// @ts-ignore
import { UspGetApplicantResponseDataResponse } from '../model';
/**
 * KycApi - axios parameter creator
 * @export
 */
export const KycApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves detailed information about a specific applicant by their unique identifier.
         * @param {number} applicantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kycGetApplicantApplicantIdGet: async (applicantId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicantId' is not null or undefined
            assertParamExists('kycGetApplicantApplicantIdGet', 'applicantId', applicantId)
            const localVarPath = `/Kyc/GetApplicant/{applicantId}`
                .replace(`{${"applicantId"}}`, encodeURIComponent(String(applicantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves related persons associated with a specific applicant using the provided request parameters.
         * @param {RelatePersonGetRequest} [relatePersonGetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kycGetRelatePersonPost: async (relatePersonGetRequest?: RelatePersonGetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Kyc/GetRelatePerson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(relatePersonGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the risk level assessment result for a specific applicant based on their unique identifier.
         * @param {number} applicantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kycGetRiskLevelApplicantIdGet: async (applicantId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicantId' is not null or undefined
            assertParamExists('kycGetRiskLevelApplicantIdGet', 'applicantId', applicantId)
            const localVarPath = `/Kyc/GetRiskLevel/{applicantId}`
                .replace(`{${"applicantId"}}`, encodeURIComponent(String(applicantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Performs KYC on customer data using the provided KYC applicant information.
         * @param {KycApplicant} [kycApplicant] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kycKycPost: async (kycApplicant?: KycApplicant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Kyc/Kyc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kycApplicant, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Searches for applicants based on the provided KYC search criteria.
         * @param {string} [name] The name or personal identifier used for searching KYC records.
         * @param {string} [referenceNo] The reference number or unique identifier used for searching KYC records.
         * @param {string} [personnalType] The type of person (personal type) used for filtering KYC records.
         * @param {string} [startDate] The start date for the search range, typically used for filtering records by a specific time frame.
         * @param {string} [endDate] The end date for the search range, typically used for filtering records by a specific time frame.
         * @param {string} [riskLevel] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kycSearchGet: async (name?: string, referenceNo?: string, personnalType?: string, startDate?: string, endDate?: string, riskLevel?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Kyc/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (referenceNo !== undefined) {
                localVarQueryParameter['ReferenceNo'] = referenceNo;
            }

            if (personnalType !== undefined) {
                localVarQueryParameter['PersonnalType'] = personnalType;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['StartDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (riskLevel !== undefined) {
                localVarQueryParameter['RiskLevel'] = riskLevel;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['PageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['SortField'] = sortField;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['SortDirection'] = sortDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KycApi - functional programming interface
 * @export
 */
export const KycApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KycApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieves detailed information about a specific applicant by their unique identifier.
         * @param {number} applicantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kycGetApplicantApplicantIdGet(applicantId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UspGetApplicantResponseDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kycGetApplicantApplicantIdGet(applicantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves related persons associated with a specific applicant using the provided request parameters.
         * @param {RelatePersonGetRequest} [relatePersonGetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kycGetRelatePersonPost(relatePersonGetRequest?: RelatePersonGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelatePersonResponseListDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kycGetRelatePersonPost(relatePersonGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieves the risk level assessment result for a specific applicant based on their unique identifier.
         * @param {number} applicantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kycGetRiskLevelApplicantIdGet(applicantId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RiskLevelResultResponseDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kycGetRiskLevelApplicantIdGet(applicantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Performs KYC on customer data using the provided KYC applicant information.
         * @param {KycApplicant} [kycApplicant] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kycKycPost(kycApplicant?: KycApplicant, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RiskLevelResultResponseDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kycKycPost(kycApplicant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Searches for applicants based on the provided KYC search criteria.
         * @param {string} [name] The name or personal identifier used for searching KYC records.
         * @param {string} [referenceNo] The reference number or unique identifier used for searching KYC records.
         * @param {string} [personnalType] The type of person (personal type) used for filtering KYC records.
         * @param {string} [startDate] The start date for the search range, typically used for filtering records by a specific time frame.
         * @param {string} [endDate] The end date for the search range, typically used for filtering records by a specific time frame.
         * @param {string} [riskLevel] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {string} [sortField] 
         * @param {string} [sortDirection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kycSearchGet(name?: string, referenceNo?: string, personnalType?: string, startDate?: string, endDate?: string, riskLevel?: string, pageIndex?: number, pageSize?: number, sortField?: string, sortDirection?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicantResponseApplicantResponsePaginationDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kycSearchGet(name, referenceNo, personnalType, startDate, endDate, riskLevel, pageIndex, pageSize, sortField, sortDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KycApi - factory interface
 * @export
 */
export const KycApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KycApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieves detailed information about a specific applicant by their unique identifier.
         * @param {KycApiKycGetApplicantApplicantIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kycGetApplicantApplicantIdGet(requestParameters: KycApiKycGetApplicantApplicantIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<UspGetApplicantResponseDataResponse> {
            return localVarFp.kycGetApplicantApplicantIdGet(requestParameters.applicantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves related persons associated with a specific applicant using the provided request parameters.
         * @param {KycApiKycGetRelatePersonPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kycGetRelatePersonPost(requestParameters: KycApiKycGetRelatePersonPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RelatePersonResponseListDataResponse> {
            return localVarFp.kycGetRelatePersonPost(requestParameters.relatePersonGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves the risk level assessment result for a specific applicant based on their unique identifier.
         * @param {KycApiKycGetRiskLevelApplicantIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kycGetRiskLevelApplicantIdGet(requestParameters: KycApiKycGetRiskLevelApplicantIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<RiskLevelResultResponseDataResponse> {
            return localVarFp.kycGetRiskLevelApplicantIdGet(requestParameters.applicantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Performs KYC on customer data using the provided KYC applicant information.
         * @param {KycApiKycKycPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kycKycPost(requestParameters: KycApiKycKycPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RiskLevelResultResponseDataResponse> {
            return localVarFp.kycKycPost(requestParameters.kycApplicant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Searches for applicants based on the provided KYC search criteria.
         * @param {KycApiKycSearchGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kycSearchGet(requestParameters: KycApiKycSearchGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ApplicantResponseApplicantResponsePaginationDataResponse> {
            return localVarFp.kycSearchGet(requestParameters.name, requestParameters.referenceNo, requestParameters.personnalType, requestParameters.startDate, requestParameters.endDate, requestParameters.riskLevel, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for kycGetApplicantApplicantIdGet operation in KycApi.
 * @export
 * @interface KycApiKycGetApplicantApplicantIdGetRequest
 */
export interface KycApiKycGetApplicantApplicantIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof KycApiKycGetApplicantApplicantIdGet
     */
    readonly applicantId: number
}

/**
 * Request parameters for kycGetRelatePersonPost operation in KycApi.
 * @export
 * @interface KycApiKycGetRelatePersonPostRequest
 */
export interface KycApiKycGetRelatePersonPostRequest {
    /**
     * 
     * @type {RelatePersonGetRequest}
     * @memberof KycApiKycGetRelatePersonPost
     */
    readonly relatePersonGetRequest?: RelatePersonGetRequest
}

/**
 * Request parameters for kycGetRiskLevelApplicantIdGet operation in KycApi.
 * @export
 * @interface KycApiKycGetRiskLevelApplicantIdGetRequest
 */
export interface KycApiKycGetRiskLevelApplicantIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof KycApiKycGetRiskLevelApplicantIdGet
     */
    readonly applicantId: number
}

/**
 * Request parameters for kycKycPost operation in KycApi.
 * @export
 * @interface KycApiKycKycPostRequest
 */
export interface KycApiKycKycPostRequest {
    /**
     * 
     * @type {KycApplicant}
     * @memberof KycApiKycKycPost
     */
    readonly kycApplicant?: KycApplicant
}

/**
 * Request parameters for kycSearchGet operation in KycApi.
 * @export
 * @interface KycApiKycSearchGetRequest
 */
export interface KycApiKycSearchGetRequest {
    /**
     * The name or personal identifier used for searching KYC records.
     * @type {string}
     * @memberof KycApiKycSearchGet
     */
    readonly name?: string

    /**
     * The reference number or unique identifier used for searching KYC records.
     * @type {string}
     * @memberof KycApiKycSearchGet
     */
    readonly referenceNo?: string

    /**
     * The type of person (personal type) used for filtering KYC records.
     * @type {string}
     * @memberof KycApiKycSearchGet
     */
    readonly personnalType?: string

    /**
     * The start date for the search range, typically used for filtering records by a specific time frame.
     * @type {string}
     * @memberof KycApiKycSearchGet
     */
    readonly startDate?: string

    /**
     * The end date for the search range, typically used for filtering records by a specific time frame.
     * @type {string}
     * @memberof KycApiKycSearchGet
     */
    readonly endDate?: string

    /**
     * 
     * @type {string}
     * @memberof KycApiKycSearchGet
     */
    readonly riskLevel?: string

    /**
     * 
     * @type {number}
     * @memberof KycApiKycSearchGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof KycApiKycSearchGet
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof KycApiKycSearchGet
     */
    readonly sortField?: string

    /**
     * 
     * @type {string}
     * @memberof KycApiKycSearchGet
     */
    readonly sortDirection?: string
}

/**
 * KycApi - object-oriented interface
 * @export
 * @class KycApi
 * @extends {BaseAPI}
 */
export class KycApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves detailed information about a specific applicant by their unique identifier.
     * @param {KycApiKycGetApplicantApplicantIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public kycGetApplicantApplicantIdGet(requestParameters: KycApiKycGetApplicantApplicantIdGetRequest, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).kycGetApplicantApplicantIdGet(requestParameters.applicantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves related persons associated with a specific applicant using the provided request parameters.
     * @param {KycApiKycGetRelatePersonPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public kycGetRelatePersonPost(requestParameters: KycApiKycGetRelatePersonPostRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).kycGetRelatePersonPost(requestParameters.relatePersonGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves the risk level assessment result for a specific applicant based on their unique identifier.
     * @param {KycApiKycGetRiskLevelApplicantIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public kycGetRiskLevelApplicantIdGet(requestParameters: KycApiKycGetRiskLevelApplicantIdGetRequest, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).kycGetRiskLevelApplicantIdGet(requestParameters.applicantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Performs KYC on customer data using the provided KYC applicant information.
     * @param {KycApiKycKycPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public kycKycPost(requestParameters: KycApiKycKycPostRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).kycKycPost(requestParameters.kycApplicant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Searches for applicants based on the provided KYC search criteria.
     * @param {KycApiKycSearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KycApi
     */
    public kycSearchGet(requestParameters: KycApiKycSearchGetRequest = {}, options?: AxiosRequestConfig) {
        return KycApiFp(this.configuration).kycSearchGet(requestParameters.name, requestParameters.referenceNo, requestParameters.personnalType, requestParameters.startDate, requestParameters.endDate, requestParameters.riskLevel, requestParameters.pageIndex, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortDirection, options).then((request) => request(this.axios, this.basePath));
    }
}
